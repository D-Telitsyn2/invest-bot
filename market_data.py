#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏—è—Ö
–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å MOEX, –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∞ —Å–ø–∏—Å–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π
"""

import aiohttp
import asyncio
import logging
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

class RealMarketData:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–µ"""

    def __init__(self):
        self.session = None

        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ - —Ç–µ–ø–µ—Ä—å AI –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–º
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        self.sectors_info = {
            "–ë–∞–Ω–∫–∏": "–ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –±–∞–Ω–∫–∏",
            "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞": "–ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏",
            "IT": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
            "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è": "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∏–µ —Ö–æ–ª–¥–∏–Ω–≥–∏",
            "–¢–µ–ª–µ–∫–æ–º": "–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã",
            "–†–∏—Ç–µ–π–ª": "–¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏",
            "–ê–≤–∏–∞—Ü–∏—è": "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏",
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏"
        }

    async def get_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession()
        return self.session

    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            self.session = None

    async def get_moex_price(self, ticker: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Å MOEX API"""
        try:
            session = await self.get_session()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º marketdata —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            url = f"https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities/{ticker}.json?iss.meta=off&iss.only=marketdata,securities&marketdata.columns=SECID,LAST,OPEN,HIGH,LOW,CLOSEPRICE,UPDATETIME,TRADINGSTATUS&securities.columns=SECID,PREVPRICE,PREVDATE"

            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()

                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ marketdata
                    marketdata = data.get('marketdata', {}).get('data', [])
                    if marketdata and len(marketdata) > 0:
                        row = marketdata[0]
                        # row[1] = LAST (–ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞)
                        if len(row) > 1 and row[1] is not None:
                            price = float(row[1])
                            update_time = row[6] if len(row) > 6 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            trading_status = row[7] if len(row) > 7 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ {ticker}: {price} ‚ÇΩ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}, —Å—Ç–∞—Ç—É—Å: {trading_status})")
                            return price

                        # –ï—Å–ª–∏ LAST –Ω–µ—Ç, –±–µ—Ä–µ–º CLOSEPRICE (—Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è)
                        elif len(row) > 5 and row[5] is not None:
                            price = float(row[5])
                            logger.info(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {ticker}: {price} ‚ÇΩ")
                            return price

                    # –ï—Å–ª–∏ marketdata –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –±–µ—Ä–µ–º –∏–∑ securities (—Ü–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è)
                    securities_data = data.get('securities', {}).get('data', [])
                    if securities_data and len(securities_data) > 0:
                        row = securities_data[0]
                        if len(row) > 1 and row[1] is not None:
                            price = float(row[1])
                            prev_date = row[2] if len(row) > 2 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è {ticker}: {price} ‚ÇΩ (–¥–∞—Ç–∞: {prev_date})")
                            return price
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ MOEX API {response.status} –¥–ª—è {ticker}")

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {ticker} —Å MOEX: {e}")

        return None

    async def get_multiple_moex_prices(self, tickers: list) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
        try:
            prices = {}

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [self.get_moex_price(ticker) for ticker in tickers]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            for ticker, result in zip(tickers, results):
                if isinstance(result, float):
                    prices[ticker] = result
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}")

            return prices

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ü–µ–Ω: {e}")
            return {}

    async def get_moex_price_with_info(self, ticker: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–∞—Ç—É—Å–µ —Ç–æ—Ä–≥–æ–≤"""
        try:
            session = await self.get_session()
            url = f"https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities/{ticker}.json?iss.meta=off&iss.only=marketdata,securities&marketdata.columns=SECID,LAST,OPEN,HIGH,LOW,CLOSEPRICE,UPDATETIME,TRADINGSTATUS&securities.columns=SECID,PREVPRICE,PREVDATE"

            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    result = {"ticker": ticker, "price": None, "status": "unknown", "update_time": None, "is_current": False}

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º marketdata
                    marketdata = data.get('marketdata', {}).get('data', [])
                    if marketdata and len(marketdata) > 0:
                        row = marketdata[0]
                        if len(row) > 1 and row[1] is not None:
                            result["price"] = float(row[1])
                            result["update_time"] = row[6] if len(row) > 6 else None
                            result["trading_status"] = row[7] if len(row) > 7 else None
                            result["is_current"] = True
                            result["status"] = "live"
                            return result
                        elif len(row) > 5 and row[5] is not None:
                            result["price"] = float(row[5])
                            result["status"] = "close_price"
                            return result

                    # Fallback –∫ securities
                    securities_data = data.get('securities', {}).get('data', [])
                    if securities_data and len(securities_data) > 0:
                        row = securities_data[0]
                        if len(row) > 1 and row[1] is not None:
                            result["price"] = float(row[1])
                            result["update_time"] = row[2] if len(row) > 2 else None
                            result["status"] = "prev_day"
                            return result

                    return result
                else:
                    return {"ticker": ticker, "price": None, "status": "api_error", "update_time": None, "is_current": False}

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ {ticker}: {e}")
            return {"ticker": ticker, "price": None, "status": "error", "update_time": None, "is_current": False}

    def get_sectors_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∫—Ç–æ—Ä–∞—Ö –¥–ª—è AI"""
        return self.sectors_info

    def is_trading_hours(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥—É—Ç –ª–∏ —Å–µ–π—á–∞—Å —Ç–æ—Ä–≥–∏ –Ω–∞ MOEX"""
        from datetime import datetime, time

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC+3 (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
            now = datetime.now()
            current_time = now.time()
            weekday = now.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

            if weekday >= 5:  # –≤—ã—Ö–æ–¥–Ω—ã–µ
                return False

            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—Ä–≥–∏ 10:00-18:40 (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
            if time(10, 0) <= current_time <= time(18, 40):
                return True

            # –í–µ—á–µ—Ä–Ω–∏–µ —Ç–æ—Ä–≥–∏ 19:05-23:50
            if time(19, 5) <= current_time <= time(23, 50):
                return True

            return False

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
market_data = RealMarketData()

async def get_diverse_investment_ideas(count: int = 5) -> List[Dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ AI –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∞
    AI —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑
    """
    try:
        # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ - –≤—Å–µ –¥–µ–ª–∞–µ—Ç AI
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        # –í–µ—Å—å –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ gpt_client.py
        logger.info("get_diverse_investment_ideas –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ AI")
        return []

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_diverse_investment_ideas: {e}")
        return []

if __name__ == "__main__":
    async def test():
        print("üîç –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å MOEX API:")
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∞–∫—Ü–∏–∏
        real_price = await market_data.get_moex_price("SBER")
        if real_price:
            print(f"‚úÖ –¶–µ–Ω–∞ SBER —Å MOEX: {real_price} ‚ÇΩ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É SBER")

        await market_data.close_session()

    asyncio.run(test())
