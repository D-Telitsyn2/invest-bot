#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏—è—Ö
–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å MOEX, –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∞ —Å–ø–∏—Å–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π
"""

import aiohttp
import asyncio
import logging
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

class RealMarketData:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–µ"""

    def __init__(self):
        self.session = None

        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ - —Ç–µ–ø–µ—Ä—å AI –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–º
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        self.sectors_info = {
            "–ë–∞–Ω–∫–∏": "–ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –±–∞–Ω–∫–∏",
            "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞": "–ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏",
            "IT": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
            "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è": "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∏–µ —Ö–æ–ª–¥–∏–Ω–≥–∏",
            "–¢–µ–ª–µ–∫–æ–º": "–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã",
            "–†–∏—Ç–µ–π–ª": "–¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏",
            "–ê–≤–∏–∞—Ü–∏—è": "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏",
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏"
        }

    async def get_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession()
        return self.session

    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            self.session = None

    async def get_moex_price(self, ticker: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å MOEX API"""
        try:
            session = await self.get_session()
            url = f"https://iss.moex.com/iss/engines/stock/markets/shares/securities/{ticker}.json"

            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç MOEX
                    securities = data.get('securities', {}).get('data', [])
                    if securities:
                        # –ò—â–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                        for row in securities:
                            if len(row) > 3 and row[3] is not None:  # LAST —Ü–µ–Ω–∞
                                return float(row[3])

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {ticker} —Å MOEX: {e}")

        return None

    async def get_realistic_price(self, ticker: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å MOEX API"""
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        real_price = await self.get_moex_price(ticker)
        if real_price:
            return real_price

        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        # AI –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return None

    def get_sectors_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∫—Ç–æ—Ä–∞—Ö –¥–ª—è AI"""
        return self.sectors_info

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
market_data = RealMarketData()

async def get_diverse_investment_ideas(count: int = 5) -> List[Dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ AI –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∞
    AI —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑
    """
    try:
        # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ - –≤—Å–µ –¥–µ–ª–∞–µ—Ç AI
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        # –í–µ—Å—å –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ gpt_client.py
        logger.info("get_diverse_investment_ideas –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ AI")
        return []

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_diverse_investment_ideas: {e}")
        return []

if __name__ == "__main__":
    async def test():
        print("üîç –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å MOEX API:")
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∞–∫—Ü–∏–∏
        real_price = await market_data.get_moex_price("SBER")
        if real_price:
            print(f"‚úÖ –¶–µ–Ω–∞ SBER —Å MOEX: {real_price} ‚ÇΩ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É SBER")

        await market_data.close_session()

    asyncio.run(test())
