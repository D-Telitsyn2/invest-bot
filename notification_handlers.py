# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

@router.callback_query(F.data == "notification_settings")
async def show_notification_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        settings = await get_user_settings(callback.from_user.id)

        settings_text = f"""
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

üìä *–û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {'‚úÖ' if settings['notifications'] else '‚ùå'}

*–î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
üåÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞* (9:00): {'‚úÖ' if settings.get('daily_market_analysis', True) else '‚ùå'}
üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç* (–≤—Å 20:00): {'‚úÖ' if settings.get('weekly_portfolio_report', True) else '‚ùå'}
üéØ *–¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã* (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω): {'‚úÖ' if settings.get('target_price_alerts', True) else '‚ùå'}
‚è∞ *–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω* (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω): {'‚úÖ' if settings.get('price_updates', False) else '‚ùå'}
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    callback_data="toggle_notifications"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞",
                    callback_data="toggle_daily_analysis"
                ),
                InlineKeyboardButton(
                    text="üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç",
                    callback_data="toggle_weekly_report"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üéØ –¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã",
                    callback_data="toggle_target_alerts"
                ),
                InlineKeyboardButton(
                    text="‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω",
                    callback_data="toggle_price_updates"
                )
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")
            ]
        ])

        await callback.message.edit_text(settings_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    await callback.answer()

@router.callback_query(F.data == "toggle_daily_analysis")
async def toggle_daily_analysis(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    settings = await get_user_settings(callback.from_user.id)
    new_value = not settings.get('daily_market_analysis', True)

    await update_user_settings(callback.from_user.id, daily_market_analysis=new_value)

    status = "–≤–∫–ª—é—á–µ–Ω" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω"
    await callback.message.answer(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ {status}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await show_notification_settings(callback)

@router.callback_query(F.data == "toggle_weekly_report")
async def toggle_weekly_report(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    settings = await get_user_settings(callback.from_user.id)
    new_value = not settings.get('weekly_portfolio_report', True)

    await update_user_settings(callback.from_user.id, weekly_portfolio_report=new_value)

    status = "–≤–∫–ª—é—á–µ–Ω" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω"
    await callback.message.answer(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç {status}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await show_notification_settings(callback)

@router.callback_query(F.data == "toggle_target_alerts")
async def toggle_target_alerts(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω–∞—Ö"""
    settings = await get_user_settings(callback.from_user.id)
    new_value = not settings.get('target_price_alerts', True)

    await update_user_settings(callback.from_user.id, target_price_alerts=new_value)

    status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    await callback.message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω–∞—Ö {status}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await show_notification_settings(callback)

@router.callback_query(F.data == "toggle_price_updates")
async def toggle_price_updates(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω"""
    settings = await get_user_settings(callback.from_user.id)
    new_value = not settings.get('price_updates', False)

    await update_user_settings(callback.from_user.id, price_updates=new_value)

    status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    await callback.message.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω {status}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await show_notification_settings(callback)
