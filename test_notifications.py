#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import asyncio
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_notifications():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("=== –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from database import init_db, get_users_with_notification_type, get_user_settings
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–æ–π
        users = await get_users_with_notification_type('daily_market_analysis')
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–æ–π")

        if users:
            for user in users:
                print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['user_id']} (@{user.get('username', 'no_username')})")
                settings = await get_user_settings(user['user_id'])
                print(f"   –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {settings}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if settings and settings.get('notifications', True):
                    print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                else:
                    print(f"   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω—ã)")
        else:
            print("‚ùå –ù–ï–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–æ–π!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ
        from database import get_pool
        pool = await get_pool()
        async with pool.acquire() as connection:
            all_users = await connection.fetch("SELECT COUNT(*) as cnt FROM users")
            all_settings = await connection.fetch("SELECT COUNT(*) as cnt FROM user_settings")
            print(f"\nüìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {all_users[0]['cnt']}")
            print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫: {all_settings[0]['cnt']}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_rows = await connection.fetch("""
                SELECT u.telegram_id, u.username, s.notifications, s.daily_market_analysis,
                       s.weekly_portfolio_report, s.target_price_alerts, s.price_updates
                FROM users u
                LEFT JOIN user_settings s ON u.telegram_id = s.user_id
                ORDER BY u.telegram_id
            """)

            print(f"\nüìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
            for row in settings_rows:
                print(f"   {row['telegram_id']} (@{row['username'] or 'no_username'}): "
                      f"notifications={row['notifications']}, "
                      f"daily={row['daily_market_analysis']}, "
                      f"weekly={row['weekly_portfolio_report']}")

        # –¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        print(f"\nüïí –¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        from scheduler import scheduler_service

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        class MockBot:
            async def send_message(self, chat_id, text, parse_mode=None):
                print(f"üì® –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}:")
                print(f"   {text[:100]}...")

        scheduler_service.bot = MockBot()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        await scheduler_service.daily_market_analysis()
        print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_notifications())
