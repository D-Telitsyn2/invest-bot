import asyncio
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
from typing import Dict, Optional

from database import (
    update_prices_in_portfolio, get_portfolio_statistics,
    get_users_with_notification_type, get_user_portfolio_for_notifications,
    check_target_prices_achieved
)
from gpt_client import get_investment_ideas
from market_data import RealMarketData

logger = logging.getLogger(__name__)

class SchedulerService:
    def __init__(self, bot=None):
        self.scheduler = AsyncIOScheduler()
        self.bot = bot
        self.is_running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.is_running:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            self.scheduler.add_job(
                self.update_market_prices,
                CronTrigger(
                    minute="*/5",
                    hour="10-18",
                    day_of_week="mon-fri"
                ),
                id="update_prices",
                name="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ü–∏–π"
            )

            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤ 9:00
            self.scheduler.add_job(
                self.daily_market_analysis,
                CronTrigger(hour=9, minute=0),
                id="daily_analysis",
                name="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"
            )

            # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º –≤ 20:00
            self.scheduler.add_job(
                self.weekly_portfolio_report,
                CronTrigger(day_of_week="sun", hour=20, minute=0),
                id="weekly_report",
                name="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            self.scheduler.add_job(
                self.check_target_prices,
                CronTrigger(
                    minute="*/30",
                    hour="10-18",
                    day_of_week="mon-fri"
                ),
                id="check_targets",
                name="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω"
            )

            self.scheduler.start()
            self.is_running = True
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            self.scheduler.shutdown()
            self.is_running = False
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def update_market_prices(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ü–∏–π –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è"""
        try:
            logger.info("‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ü–∏–π...")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω)
            users = await get_users_with_notification_type('price_updates')
            if not users:
                return

            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –∏–∑ –≤—Å–µ—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
            unique_tickers = set()
            for user in users:
                portfolio = await get_user_portfolio_for_notifications(user['user_id'])
                for position in portfolio:
                    unique_tickers.add(position['ticker'])

            if not unique_tickers:
                return

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
            market_data = RealMarketData()
            try:
                prices = await market_data.get_multiple_moex_prices(list(unique_tickers))
                if prices:
                    await update_prices_in_portfolio(prices)
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è {len(prices)} –∞–∫—Ü–∏–π")
            finally:
                await market_data.close_session()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")

    async def daily_market_analysis(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        try:
            logger.info("üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            users = await get_users_with_notification_type('daily_market_analysis')

            for user in users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    ideas = await get_investment_ideas(
                        budget=user['max_investment_amount'],
                        risk_level=user['risk_level']
                    )

                    if ideas and self.bot:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message = "üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä—ã–Ω–∫–∞*\n\n"
                        message += f"üìà *–°–≤–µ–∂–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –≤–∞—Å:*\n\n"

                        for i, idea in enumerate(ideas[:3], 1):  # –¢–æ–ø-3 –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                            current_price = idea.get('price', 0)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'price' –≤–º–µ—Å—Ç–æ 'current_price'
                            target_price = idea.get('target_price', 0)
                            potential_return = ((target_price - current_price) / current_price * 100) if current_price > 0 else 0

                            message += f"*{i}. {idea['ticker']}*\n"
                            message += f"üí∞ –¶–µ–Ω–∞: {current_price:.2f} ‚ÇΩ ‚Üí üéØ {target_price:.2f} ‚ÇΩ\n"
                            message += f"üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +{potential_return:.1f}%\n"
                            message += f"üìù {idea['reasoning'][:100]}...\n\n"

                        message += "_–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–æ—Ç–µ: /ideas_"

                        await self.bot.send_message(
                            chat_id=user['user_id'],
                            text=message,
                            parse_mode="Markdown"
                        )

                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(0.1)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")

    async def weekly_portfolio_report(self):
        """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è–º"""
        try:
            logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏
            users = await get_users_with_notification_type('weekly_portfolio_report')

            for user in users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    portfolio = await get_user_portfolio_for_notifications(user['user_id'])

                    if not portfolio:
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    stats = await get_portfolio_statistics(user['user_id'])

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                    message = "üìÖ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é*\n\n"

                    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    total_value = stats.get('total_value', 0)
                    total_cost = stats.get('total_cost', 0)
                    total_pnl = total_value - total_cost
                    total_return = (total_pnl / total_cost * 100) if total_cost > 0 else 0

                    message += f"üíº *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                    message += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:,.0f} ‚ÇΩ\n"
                    message += f"üí∏ –í–ª–æ–∂–µ–Ω–æ: {total_cost:,.0f} ‚ÇΩ\n"
                    message += f"üìà P&L: {total_pnl:+,.0f} ‚ÇΩ ({total_return:+.1f}%)\n\n"

                    # –¢–æ–ø –ø–æ–∑–∏—Ü–∏–∏
                    message += "üèÜ *–¢–æ–ø –ø–æ–∑–∏—Ü–∏–∏:*\n"
                    sorted_positions = sorted(portfolio, key=lambda x: x['return_pct'], reverse=True)

                    for i, pos in enumerate(sorted_positions[:5], 1):
                        message += f"{i}. *{pos['ticker']}*: {pos['return_pct']:+.1f}% "
                        message += f"({pos['unrealized_pnl']:+,.0f} ‚ÇΩ)\n"

                    message += f"\n_–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–æ—Ç–µ: /portfolio_"

                    if self.bot:
                        await self.bot.send_message(
                            chat_id=user['user_id'],
                            text=message,
                            parse_mode="Markdown"
                        )

                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(0.1)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")

    async def check_target_prices(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω"""
        try:
            logger.info("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω...")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω–∞—Ö
            users = await get_users_with_notification_type('target_price_alerts')

            for user in users:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω
                    achieved_targets = await check_target_prices_achieved(user['user_id'])

                    if not achieved_targets:
                        continue

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    message = "üéØ *–¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã!*\n\n"

                    for target in achieved_targets:
                        message += f"*{target['ticker']}*\n"
                        message += f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target['target_price']:.2f} ‚ÇΩ\n"
                        message += f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {target['current_price']:.2f} ‚ÇΩ\n"
                        message += f"üìà –í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å: {target['unrealized_pnl']:+,.0f} ‚ÇΩ ({target['return_pct']:+.1f}%)\n\n"

                    message += "_–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏! üí∞_"

                    if self.bot:
                        await self.bot.send_message(
                            chat_id=user['user_id'],
                            text=message,
                            parse_mode="Markdown"
                        )

                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(0.1)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω: {e}")

    def add_custom_job(self, func, trigger, job_id: str, name: Optional[str] = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            self.scheduler.add_job(
                func=func,
                trigger=trigger,
                id=job_id,
                name=name or job_id,
                replace_existing=True
            )
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {name or job_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {job_id}: {e}")

    def remove_job(self, job_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            self.scheduler.remove_job(job_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {job_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {job_id}: {e}")

    def list_jobs(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        jobs = self.scheduler.get_jobs()
        return [{"id": job.id, "name": job.name, "next_run": job.next_run_time} for job in jobs]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_service = SchedulerService()
