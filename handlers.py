import asyncio
import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from gpt_client import XAIClient
from database import get_user_portfolio, save_order, get_order_history, create_user, update_user_activity

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class InvestmentStates(StatesGroup):
    waiting_for_confirmation = State()
    waiting_for_amount = State()

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (@{message.from_user.username})")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    await update_user_activity(message.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio"),
            InlineKeyboardButton(text="üí° –ò–¥–µ–∏", callback_data="get_ideas")
        ],
        [
            InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="history"),
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ])

    welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Invest Bot!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üí° –ü–æ–ª—É—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –æ—Ç AI
‚Ä¢ üíº –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
‚Ä¢ üìà –ü–æ–ª—É—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """

    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(Command("portfolio"))
async def cmd_portfolio(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        portfolio = await get_user_portfolio(message.from_user.id)

        if not portfolio:
            await message.answer("üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç")
            return

        portfolio_text = "üíº *–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:*\n\n"
        total_value = 0

        for position in portfolio:
            portfolio_text += f"üìà {position['ticker']}: {position['quantity']} —à—Ç.\n"
            portfolio_text += f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {position['avg_price']:.2f} ‚ÇΩ\n"
            portfolio_text += f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {position['current_value']:.2f} ‚ÇΩ\n\n"
            total_value += position['current_value']

        portfolio_text += f"üíé *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f} ‚ÇΩ*"

        await message.answer(portfolio_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è")

@router.message(Command("ideas"))
async def cmd_ideas(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏"""
    await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ —Å –ø–æ–º–æ—â—å—é xAI Grok...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–∏ –æ—Ç xAI Grok
        xai_client = XAIClient()
        ideas = await xai_client.get_investment_ideas(budget=10000)

        if not ideas:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        ideas_text = "üöÄ *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –æ—Ç xAI Grok:*\n\n"

        for i, idea in enumerate(ideas[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –∏–¥–µ–π
            ideas_text += f"*{i}. {idea['ticker']}*\n"
            ideas_text += f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {idea['action']}\n"
            ideas_text += f"üí∞ –¶–µ–Ω–∞: {idea['price']:.2f} ‚ÇΩ\n"
            ideas_text += f"üéØ –¶–µ–ª—å: {idea['target_price']:.2f} ‚ÇΩ\n"
            ideas_text += f"üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {idea['reasoning']}\n\n"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–¥–µ–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üìà {idea['ticker']}", callback_data=f"select_idea_{i}")]
            for i, idea in enumerate(ideas[:15])
        ])

        await message.answer(ideas_text, reply_markup=keyboard, parse_mode="Markdown")
        await state.update_data(investment_ideas=ideas)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–¥–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π")

@router.callback_query(F.data.startswith("select_idea_"))
async def process_idea_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –∏–¥–µ–∏"""
    idea_index = int(callback.data.split("_")[-1])

    data = await state.get_data()
    ideas = data.get("investment_ideas", [])

    if idea_index < len(ideas):
        selected_idea = ideas[idea_index]

        confirmation_text = f"""
üí° *–í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–¥–µ—è:*

üìà –¢–∏–∫–µ—Ä: *{selected_idea['ticker']}*
üìä –î–µ–π—Å—Ç–≤–∏–µ: *{selected_idea['action']}*
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *{selected_idea['price']:.2f} ‚ÇΩ*
üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: *{selected_idea['target_price']:.2f} ‚ÇΩ*

üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
{selected_idea['reasoning']}

–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):
        """

        await callback.message.answer(confirmation_text, parse_mode="Markdown")
        await state.update_data(selected_idea=selected_idea)
        await state.set_state(InvestmentStates.waiting_for_amount)

    await callback.answer()

@router.message(InvestmentStates.waiting_for_amount)
async def process_investment_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        amount = float(message.text.replace(",", "."))

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        data = await state.get_data()
        selected_idea = data.get("selected_idea")

        if not selected_idea:
            await message.answer("‚ùå –ò–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /ideas")
            await state.clear()
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
        quantity = int(amount / selected_idea['price'])
        total_cost = quantity * selected_idea['price']

        if quantity == 0:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏")
            return

        confirmation_text = f"""
‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:*

üìà –¢–∏–∫–µ—Ä: *{selected_idea['ticker']}*
üìä –û–ø–µ—Ä–∞—Ü–∏—è: *{selected_idea['action']}*
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{quantity} —à—Ç.*
üí∞ –¶–µ–Ω–∞ –∑–∞ –∞–∫—Ü–∏—é: *{selected_idea['price']:.2f} ‚ÇΩ*
üíé –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: *{total_cost:.2f} ‚ÇΩ*

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É?
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_trade"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_trade")
            ]
        ])

        await message.answer(confirmation_text, reply_markup=keyboard, parse_mode="Markdown")
        await state.update_data(quantity=quantity, total_cost=total_cost)
        await state.set_state(InvestmentStates.waiting_for_confirmation)

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 5000.50)")

@router.callback_query(F.data == "confirm_trade")
async def confirm_trade(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
    try:
        data = await state.get_data()
        selected_idea = data.get("selected_idea")
        quantity = data.get("quantity")
        total_cost = data.get("total_cost")

        # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ (—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)
        await callback.message.edit_text(
            "‚ùå –¢–æ—Ä–≥–æ–≤–ª—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –≤–∞—à–µ–º –±—Ä–æ–∫–µ—Ä—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.",
            reply_markup=None
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        await state.clear()

    await callback.answer()

@router.callback_query(F.data == "cancel_trade")
async def cancel_trade(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏"""
    await callback.message.answer("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await callback.answer()

@router.message(Command("history"))
async def cmd_history(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        history = await get_order_history(message.from_user.id)

        if not history:
            await message.answer("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞")
            return

        history_text = "üìä *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:*\n\n"

        for order in history[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
            history_text += f"üìÖ {order['date']}\n"
            history_text += f"üìà {order['ticker']}: {order['quantity']} —à—Ç.\n"
            history_text += f"üí∞ –¶–µ–Ω–∞: {order['price']:.2f} ‚ÇΩ\n"
            history_text += f"üìä –û–ø–µ—Ä–∞—Ü–∏—è: {order['order_type']}\n"
            history_text += f"üíé –°—É–º–º–∞: {order['total_amount']:.2f} ‚ÇΩ\n\n"

        await message.answer(history_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π")

@router.callback_query(F.data == "portfolio")
async def show_portfolio_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å —á–µ—Ä–µ–∑ callback"""
    await cmd_portfolio(callback.message)
    await callback.answer()

@router.callback_query(F.data == "get_ideas")
async def get_ideas_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ —á–µ—Ä–µ–∑ callback"""
    await cmd_ideas(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "history")
async def show_history_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ callback"""
    await cmd_history(callback.message)
    await callback.answer()

@router.callback_query(F.data == "help")
async def show_help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    help_text = """
‚ùì *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:*

ü§ñ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /portfolio - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å
‚Ä¢ /ideas - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏
‚Ä¢ /history - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π

üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à—É—é—Å—è –∏–¥–µ—é
3. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–¥–µ–ª–∫—É

‚ö†Ô∏è *–í–∞–∂–Ω–æ:*
–í—Å–µ —Å–¥–µ–ª–∫–∏ —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ sandbox —Ä–µ–∂–∏–º–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    """

    await callback.message.answer(help_text, parse_mode="Markdown")
    await callback.answer()

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)
