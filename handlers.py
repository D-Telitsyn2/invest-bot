import asyncio
import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from gpt_client import XAIClient
from database import get_user_portfolio, save_order, get_order_history, create_user, update_user_activity, get_user_settings, update_user_settings

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class InvestmentStates(StatesGroup):
    waiting_for_confirmation = State()
    waiting_for_amount = State()
    waiting_for_risk_level = State()
    waiting_for_max_amount = State()

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (@{message.from_user.username})")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    await update_user_activity(message.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio"),
            InlineKeyboardButton(text="üí° –ò–¥–µ–∏", callback_data="get_ideas")
        ],
        [
            InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="history"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ])

    welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Invest Bot!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üí° –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –æ—Ç AI
‚Ä¢ üíº –£–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä—ã–Ω–∫–µ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """

    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(Command("portfolio"))
async def cmd_portfolio(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
    try:
        await message.answer("üìä –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")

        portfolio = await get_user_portfolio(message.from_user.id)

        if not portfolio:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí° –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏", callback_data="get_ideas")]
            ])
            await message.answer("üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç\n\n–ù–∞—á–Ω–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å!", reply_markup=keyboard)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        from market_data import market_data
        tickers = [pos['ticker'] for pos in portfolio]
        current_prices = await market_data.get_multiple_moex_prices(tickers)

        portfolio_text = "üíº *–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:*\n\n"
        total_value = 0
        total_invested = 0

        for position in portfolio:
            ticker = position['ticker']
            quantity = position['quantity']
            avg_price = position['avg_price']

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å –±–∏—Ä–∂–∏
            current_price = current_prices.get(ticker, position.get('current_price', avg_price))
            current_value = quantity * current_price
            invested_value = quantity * avg_price
            profit_loss = current_value - invested_value
            profit_percent = (profit_loss / invested_value * 100) if invested_value > 0 else 0

            profit_emoji = "üìà" if profit_loss >= 0 else "üìâ"
            profit_sign = "+" if profit_loss >= 0 else ""

            portfolio_text += f"üìà *{ticker}*: {quantity} —à—Ç.\n"
            portfolio_text += f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.2f} ‚ÇΩ\n"
            portfolio_text += f"ÔøΩ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} ‚ÇΩ\n"
            portfolio_text += f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {current_value:.2f} ‚ÇΩ\n"
            portfolio_text += f"{profit_emoji} P&L: {profit_sign}{profit_loss:.2f} ‚ÇΩ ({profit_sign}{profit_percent:.1f}%)\n\n"

            total_value += current_value
            total_invested += invested_value

        total_profit = total_value - total_invested
        total_profit_percent = (total_profit / total_invested * 100) if total_invested > 0 else 0
        total_emoji = "üìà" if total_profit >= 0 else "üìâ"
        total_sign = "+" if total_profit >= 0 else ""

        portfolio_text += f"üíé *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f} ‚ÇΩ*\n"
        portfolio_text += f"üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_invested:.2f} ‚ÇΩ\n"
        portfolio_text += f"{total_emoji} *–û–±—â–∏–π P&L: {total_sign}{total_profit:.2f} ‚ÇΩ ({total_sign}{total_profit_percent:.1f}%)*"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üóëÔ∏è –ü—Ä–æ–¥–∞—Ç—å –∞–∫—Ü–∏–∏", callback_data="sell_stock"),
                InlineKeyboardButton(text="üí° –ù–æ–≤—ã–µ –∏–¥–µ–∏", callback_data="get_ideas")
            ]
        ])

        await message.answer(portfolio_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è")

@router.message(Command("ideas"))
async def cmd_ideas(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏"""
    await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ —Å –ø–æ–º–æ—â—å—é xAI Grok...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = await get_user_settings(message.from_user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–∏ –æ—Ç xAI Grok —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
        xai_client = XAIClient()
        ideas = await xai_client.get_investment_ideas(
            budget=settings['max_investment_amount'],
            risk_level=settings['risk_level']
        )

        if not ideas:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
        await state.update_data(investment_ideas=ideas)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–¥–µ—è–º–∏
        ideas_text = "üéØ *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –æ—Ç xAI Grok:*\n\n"
        keyboard_buttons = []

        for i, idea in enumerate(ideas[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –∏–¥–µ–π
            ticker = idea.get('ticker', 'N/A')
            price = idea.get('price', 0)
            target_price = idea.get('target_price', 0)
            action = idea.get('action', 'BUY')
            reasoning = idea.get('reasoning', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            potential_return = 0
            if price > 0 and target_price > 0:
                potential_return = ((target_price - price) / price) * 100

            ideas_text += f"*{i}.* `{ticker}`\n"
            ideas_text += f"üí∞ –¶–µ–Ω–∞: {price:.2f} ‚ÇΩ\n"
            ideas_text += f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {target_price:.2f} ‚ÇΩ (+{potential_return:.1f}%)\n"
            ideas_text += f" {reasoning}\n\n"            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π –∏–¥–µ–∏
            if i <= 2:  # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –ø–µ—Ä–≤—ã–µ 2 –∏–¥–µ–∏
                if len(keyboard_buttons) == 0:
                    keyboard_buttons.append([])
                keyboard_buttons[0].append(
                    InlineKeyboardButton(text=f"üí≥ –ö—É–ø–∏—Ç—å {ticker}", callback_data=f"select_idea_{i-1}")
                )
            elif i <= 4:  # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - —Å–ª–µ–¥—É—é—â–∏–µ 2 –∏–¥–µ–∏
                if len(keyboard_buttons) == 1:
                    keyboard_buttons.append([])
                keyboard_buttons[1].append(
                    InlineKeyboardButton(text=f"üí≥ –ö—É–ø–∏—Ç—å {ticker}", callback_data=f"select_idea_{i-1}")
                )
            else:  # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –ø–æ—Å–ª–µ–¥–Ω—è—è –∏–¥–µ—è
                if len(keyboard_buttons) == 2:
                    keyboard_buttons.append([])
                keyboard_buttons[2].append(
                    InlineKeyboardButton(text=f"üí≥ –ö—É–ø–∏—Ç—å {ticker}", callback_data=f"select_idea_{i-1}")
                )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–¥–µ–π
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–¥–µ–∏", callback_data="get_ideas")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await message.answer(ideas_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π")

@router.callback_query(F.data == "notification_settings")
async def show_notification_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        settings = await get_user_settings(callback.from_user.id)

        settings_text = f"""
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

üìä *–û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {'‚úÖ' if settings['notifications'] else '‚ùå'}

*–î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
üåÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞* (9:00): {'‚úÖ' if settings.get('daily_market_analysis', True) else '‚ùå'}
üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç* (–≤—Å 20:00): {'‚úÖ' if settings.get('weekly_portfolio_report', True) else '‚ùå'}
üéØ *–¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã* (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω): {'‚úÖ' if settings.get('target_price_alerts', True) else '‚ùå'}
‚è∞ *–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω* (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω): {'‚úÖ' if settings.get('price_updates', False) else '‚ùå'}
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    callback_data="toggle_notifications"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞",
                    callback_data="toggle_daily_analysis"
                ),
                InlineKeyboardButton(
                    text="üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç",
                    callback_data="toggle_weekly_report"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üéØ –¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã",
                    callback_data="toggle_target_alerts"
                ),
                InlineKeyboardButton(
                    text="‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω",
                    callback_data="toggle_price_updates"
                )
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")
            ]
        ])

        await callback.message.edit_text(settings_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    await callback.answer()

@router.callback_query(F.data == "toggle_daily_analysis")
async def toggle_daily_analysis(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        settings = await get_user_settings(callback.from_user.id)
        new_value = not settings.get('daily_market_analysis', True)

        await update_user_settings(callback.from_user.id, daily_market_analysis=new_value)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ -> {new_value}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await show_notification_settings(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_daily_analysis: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

@router.callback_query(F.data == "toggle_weekly_report")
async def toggle_weekly_report(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        settings = await get_user_settings(callback.from_user.id)
        new_value = not settings.get('weekly_portfolio_report', True)

        await update_user_settings(callback.from_user.id, weekly_portfolio_report=new_value)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç -> {new_value}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await show_notification_settings(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_weekly_report: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

@router.callback_query(F.data == "toggle_target_alerts")
async def toggle_target_alerts(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω–∞—Ö"""
    try:
        settings = await get_user_settings(callback.from_user.id)
        new_value = not settings.get('target_price_alerts', True)

        await update_user_settings(callback.from_user.id, target_price_alerts=new_value)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}: —Ü–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã -> {new_value}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await show_notification_settings(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_target_alerts: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

@router.callback_query(F.data == "toggle_price_updates")
async def toggle_price_updates(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω"""
    try:
        settings = await get_user_settings(callback.from_user.id)
        new_value = not settings.get('price_updates', False)

        await update_user_settings(callback.from_user.id, price_updates=new_value)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}: –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω -> {new_value}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await show_notification_settings(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_price_updates: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)

@router.callback_query(F.data.startswith("select_idea_"))
async def process_idea_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –∏–¥–µ–∏"""
    idea_index = int(callback.data.split("_")[-1])

    data = await state.get_data()
    ideas = data.get("investment_ideas", [])

    if idea_index < len(ideas):
        selected_idea = ideas[idea_index]

        confirmation_text = f"""
üí° *–í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–¥–µ—è:*

üìà –¢–∏–∫–µ—Ä: *{selected_idea['ticker']}*
üìä –î–µ–π—Å—Ç–≤–∏–µ: *{selected_idea['action']}*
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *{selected_idea['price']:.2f} ‚ÇΩ*
üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: *{selected_idea['target_price']:.2f} ‚ÇΩ*

üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
{selected_idea['reasoning']}

–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):
        """

        await callback.message.answer(confirmation_text, parse_mode="Markdown")
        await state.update_data(selected_idea=selected_idea)
        await state.set_state(InvestmentStates.waiting_for_amount)

    await callback.answer()

@router.message(InvestmentStates.waiting_for_amount)
async def process_investment_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        amount = float(message.text.replace(",", "."))

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        data = await state.get_data()
        selected_idea = data.get("selected_idea")

        if not selected_idea:
            await message.answer("‚ùå –ò–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /ideas")
            await state.clear()
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
        quantity = int(amount / selected_idea['price'])
        total_cost = quantity * selected_idea['price']

        if quantity == 0:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏")
            return

        confirmation_text = f"""
‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:*

üìà –¢–∏–∫–µ—Ä: *{selected_idea['ticker']}*
üìä –û–ø–µ—Ä–∞—Ü–∏—è: *{selected_idea['action']}*
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{quantity} —à—Ç.*
üí∞ –¶–µ–Ω–∞ –∑–∞ –∞–∫—Ü–∏—é: *{selected_idea['price']:.2f} ‚ÇΩ*
üíé –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: *{total_cost:.2f} ‚ÇΩ*

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É?
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_trade"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_trade")
            ]
        ])

        await message.answer(confirmation_text, reply_markup=keyboard, parse_mode="Markdown")
        await state.update_data(quantity=quantity, total_cost=total_cost)
        await state.set_state(InvestmentStates.waiting_for_confirmation)

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 5000.50)")

@router.callback_query(F.data == "confirm_trade")
async def confirm_trade(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
    try:
        data = await state.get_data()
        selected_idea = data.get("selected_idea")
        quantity = data.get("quantity")
        total_cost = data.get("total_cost")

        if not all([selected_idea, quantity, total_cost]):
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = await save_order(
            user_id=callback.from_user.id,
            ticker=selected_idea['ticker'],
            quantity=quantity,
            price=selected_idea['price'],
            order_type=selected_idea['action'],
            total_amount=total_cost
        )

        if success:
            await callback.message.edit_text(
                f"‚úÖ *–°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n"
                f"üìà –¢–∏–∫–µ—Ä: *{selected_idea['ticker']}*\n"
                f"üìä –û–ø–µ—Ä–∞—Ü–∏—è: *{selected_idea['action']}*\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{quantity} —à—Ç.*\n"
                f"üí∞ –¶–µ–Ω–∞: *{selected_idea['price']:.2f} ‚ÇΩ*\n"
                f"üíé –°—É–º–º–∞: *{total_cost:.2f} ‚ÇΩ*\n\n"
                f"–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å!",
                reply_markup=None,
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=None
            )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        await state.clear()

    await callback.answer()

@router.callback_query(F.data == "sell_stock")
async def sell_stock_selection(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∞–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        portfolio = await get_user_portfolio(callback.from_user.id)

        if not portfolio:
            await callback.message.answer("üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç")
            await callback.answer()
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ü–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        keyboard_buttons = []
        for position in portfolio:
            ticker = position['ticker']
            quantity = position['quantity']
            button_text = f"üìâ {ticker} ({quantity} —à—Ç.)"
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"sell_{ticker}"
            )])

        keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.answer(
            "üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:*",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è")

    await callback.answer()

@router.callback_query(F.data.startswith("sell_"))
async def process_sell_stock(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏"""
    if callback.data == "sell_stock":
        await sell_stock_selection(callback, state)
        return

    ticker = callback.data.replace("sell_", "")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
        portfolio = await get_user_portfolio(callback.from_user.id)
        position = next((p for p in portfolio if p['ticker'] == ticker), None)

        if not position:
            await callback.message.answer(f"‚ùå –ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ")
            await callback.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        from market_data import market_data
        current_price = await market_data.get_moex_price(ticker)
        if not current_price:
            current_price = position.get('current_price', position['avg_price'])

        quantity = position['quantity']
        avg_price = position['avg_price']
        current_value = quantity * current_price
        invested_value = quantity * avg_price
        profit_loss = current_value - invested_value

        confirmation_text = f"""
üóëÔ∏è *–ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π {ticker}*

üìä –í –ø–æ—Ä—Ç—Ñ–µ–ª–µ: *{quantity} —à—Ç.*
üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: *{avg_price:.2f} ‚ÇΩ*
üí± –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *{current_price:.2f} ‚ÇΩ*
üíé –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: *{current_value:.2f} ‚ÇΩ*
üìà P&L: *{profit_loss:+.2f} ‚ÇΩ*

–ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ –∞–∫—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ?
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ", callback_data=f"confirm_sell_{ticker}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
            ]
        ])

        await callback.message.answer(confirmation_text, reply_markup=keyboard, parse_mode="Markdown")
        await state.update_data(sell_ticker=ticker, sell_price=current_price, sell_quantity=quantity)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–∞–∂–∏ {ticker}: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–∞–∂–∏")

    await callback.answer()

@router.callback_query(F.data.startswith("confirm_sell_"))
async def confirm_sell_stock(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ü–∏–∏"""
    ticker = callback.data.replace("confirm_sell_", "")

    try:
        data = await state.get_data()
        sell_price = data.get("sell_price")
        sell_quantity = data.get("sell_quantity")

        if not all([sell_price, sell_quantity]):
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
            await state.clear()
            return

        total_amount = sell_quantity * sell_price

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É)
        success = await save_order(
            user_id=callback.from_user.id,
            ticker=ticker,
            quantity=sell_quantity,
            price=sell_price,
            order_type="SELL",
            total_amount=total_amount
        )

        if success:
            await callback.message.edit_text(
                f"‚úÖ *–ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n"
                f"üìâ –ü—Ä–æ–¥–∞–Ω–æ: *{ticker}*\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{sell_quantity} —à—Ç.*\n"
                f"üí∞ –¶–µ–Ω–∞: *{sell_price:.2f} ‚ÇΩ*\n"
                f"üíé –ü–æ–ª—É—á–µ–Ω–æ: *{total_amount:.2f} ‚ÇΩ*",
                reply_markup=None,
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏",
                reply_markup=None
            )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ {ticker}: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏")
        await state.clear()

    await callback.answer()

@router.callback_query(F.data == "cancel_sell")
async def cancel_sell(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    await callback.message.answer("‚ùå –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel_trade")
async def cancel_trade(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏"""
    await callback.message.answer("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await callback.answer()

@router.message(Command("history"))
async def cmd_history(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        history = await get_order_history(message.from_user.id)

        if not history:
            await message.answer("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞")
            return

        history_text = "üìä *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:*\n\n"

        for order in history[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
            history_text += f"üìÖ {order['date']}\n"
            history_text += f"üìà {order['ticker']}: {order['quantity']} —à—Ç.\n"
            history_text += f"üí∞ –¶–µ–Ω–∞: {order['price']:.2f} ‚ÇΩ\n"
            history_text += f"üìä –û–ø–µ—Ä–∞—Ü–∏—è: {order['order_type']}\n"
            history_text += f"üíé –°—É–º–º–∞: {order['total_amount']:.2f} ‚ÇΩ\n\n"

        await message.answer(history_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π")

@router.message(Command("settings"))
async def cmd_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–æ–º–∞–Ω–¥–∞)"""
    try:
        settings = await get_user_settings(message.from_user.id)

        risk_levels = {
            'low': 'üü¢ –ù–∏–∑–∫–∏–π',
            'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
            'high': 'üî¥ –í—ã—Å–æ–∫–∏–π'
        }

        settings_text = f"""
‚öôÔ∏è *–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*

üéØ *–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:* {risk_levels.get(settings['risk_level'], settings['risk_level'])}
üí∞ *–ú–∞–∫—Å. —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:* {settings['max_investment_amount']:,.0f} ‚ÇΩ
üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings['notifications'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üéØ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", callback_data="set_risk"),
                InlineKeyboardButton(text="üí∞ –ú–∞–∫—Å. —Å—É–º–º–∞", callback_data="set_max_amount")
            ],
            [
                InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]
        ])

        await message.answer(settings_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data == "portfolio")
async def show_portfolio_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å —á–µ—Ä–µ–∑ callback"""
    await cmd_portfolio(callback.message)
    await callback.answer()

@router.callback_query(F.data == "get_ideas")
async def get_ideas_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ —á–µ—Ä–µ–∑ callback"""
    await cmd_ideas(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "history")
async def show_history_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ callback"""
    await cmd_history(callback.message)
    await callback.answer()

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å (–∫–æ–º–∞–Ω–¥–∞)"""
    help_text = """
‚ùì *–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É:*

ü§ñ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ /portfolio - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å
‚Ä¢ /ideas - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –æ—Ç AI
‚Ä¢ /history - –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ

üìä *–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*

*1. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ (AI-powered):*
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Ü–µ–ª–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
‚Ä¢ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

*2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º:*
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–æ–≤
‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è

*3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
‚Ä¢ üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä—ã–Ω–∫–∞ (9:00)
‚Ä¢ üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è (–≤—Å 20:00)
‚Ä¢ üéØ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω
‚Ä¢ ‚è∞ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

*4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π/—É–º–µ—Ä–µ–Ω–Ω—ã–π/–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)
‚Ä¢ –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

üí° *–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:*
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
2. –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
3. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∏–¥–µ–∏ —á–µ—Ä–µ–∑ "üí° –ò–¥–µ–∏"
4. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ
5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

üîí *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ API
‚Ä¢ –î–≤–æ–π–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–¥–µ–ª–æ–∫
‚Ä¢ Sandbox-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è

üìà *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:*
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å xAI Grok –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
‚Ä¢ –£—á–µ—Ç –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

‚ùì *–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
    """

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await message.answer(help_text, parse_mode="Markdown", reply_markup=keyboard)

@router.callback_query(F.data == "help")
async def show_help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    help_text = """
‚ùì *–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É:*

ü§ñ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ /portfolio - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å
‚Ä¢ /ideas - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –æ—Ç AI
‚Ä¢ /history - –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üìä *–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*

*1. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ (AI-powered):*
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Ü–µ–ª–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
‚Ä¢ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

*2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º:*
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–æ–≤
‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è

*3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
‚Ä¢ üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä—ã–Ω–∫–∞ (9:00)
‚Ä¢ üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è (–≤—Å 20:00)
‚Ä¢ üéØ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω
‚Ä¢ ‚è∞ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

*4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π/—É–º–µ—Ä–µ–Ω–Ω—ã–π/–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)
‚Ä¢ –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

üí° *–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:*
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
2. –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
3. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∏–¥–µ–∏ —á–µ—Ä–µ–∑ "üí° –ò–¥–µ–∏"
4. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ
5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

üîí *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ API
‚Ä¢ –î–≤–æ–π–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–¥–µ–ª–æ–∫
‚Ä¢ Sandbox-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è

üìà *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:*
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å xAI Grok –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
‚Ä¢ –£—á–µ—Ç –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

‚ùì *–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
    """

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await callback.message.edit_text(help_text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        settings = await get_user_settings(callback.from_user.id)

        risk_levels = {
            'low': 'üü¢ –ù–∏–∑–∫–∏–π',
            'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
            'high': 'üî¥ –í—ã—Å–æ–∫–∏–π'
        }

        settings_text = f"""
‚öôÔ∏è *–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*

üéØ *–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:* {risk_levels.get(settings['risk_level'], settings['risk_level'])}
üí∞ *–ú–∞–∫—Å. —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:* {settings['max_investment_amount']:,.0f} ‚ÇΩ
üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings['notifications'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üéØ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", callback_data="set_risk"),
                InlineKeyboardButton(text="üí∞ –ú–∞–∫—Å. —Å—É–º–º–∞", callback_data="set_max_amount")
            ],
            [
                InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]
        ])

        await callback.message.answer(settings_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    await callback.answer()

@router.callback_query(F.data == "set_risk")
async def set_risk_level(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –ù–∏–∑–∫–∏–π", callback_data="risk_low"),
            InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="risk_medium")
        ],
        [
            InlineKeyboardButton(text="üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="risk_high"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings")
        ]
    ])

    await callback.message.answer(
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:*\n\n"
        "üü¢ *–ù–∏–∑–∫–∏–π* - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
        "üü° *–°—Ä–µ–¥–Ω–∏–π* - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å\n"
        "üî¥ *–í—ã—Å–æ–∫–∏–π* - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("risk_"))
async def update_risk_level(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    risk_level = callback.data.replace("risk_", "")

    await update_user_settings(callback.from_user.id, risk_level=risk_level)

    risk_names = {'low': '–ù–∏–∑–∫–∏–π', 'medium': '–°—Ä–µ–¥–Ω–∏–π', 'high': '–í—ã—Å–æ–∫–∏–π'}
    await callback.message.answer(
        f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{risk_names[risk_level]}*",
        parse_mode="Markdown"
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    await show_settings(callback)

@router.callback_query(F.data == "set_max_amount")
async def set_max_amount(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    await callback.message.answer(
        "üí∞ *–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –æ–¥–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–≤ —Ä—É–±–ª—è—Ö):*\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 50000",
        parse_mode="Markdown"
    )
    await state.set_state(InvestmentStates.waiting_for_max_amount)
    await callback.answer()

@router.message(InvestmentStates.waiting_for_max_amount)
async def process_max_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(message.text.replace(",", ".").replace(" ", ""))

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        if amount > 10000000:  # 10 –º–ª–Ω –ª–∏–º–∏—Ç
            await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ (–º–∞–∫—Å–∏–º—É–º 10,000,000 ‚ÇΩ)")
            return

        await update_user_settings(message.from_user.id, max_investment_amount=amount)

        await message.answer(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: *{amount:,.0f} ‚ÇΩ*", parse_mode="Markdown")
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000)")

@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        settings = await get_user_settings(callback.from_user.id)
        new_notifications = not settings['notifications']

        await update_user_settings(callback.from_user.id, notifications=new_notifications)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}: –æ–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è -> {new_notifications}")

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ –æ–∫–Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Ç—É–¥–∞
        if "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" in callback.message.text:
            await show_notification_settings(callback)
        else:
            # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            await show_settings(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_notifications: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

@router.message(Command("test_notifications"))
async def test_notifications(message: Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    settings = await get_user_settings(user_id)

    if not settings['notifications']:
        await message.answer("‚ùå –£ –≤–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –í–∫–ª—é—á–∏—Ç–µ –∏—Ö –≤ /settings")
        return

    # –°–∏–º—É–ª—è—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    await message.answer("üß™ *–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω...*", parse_mode="Markdown")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    xai_client = XAIClient()
    ideas = await xai_client.get_investment_ideas(
        budget=settings['max_investment_amount'],
        risk_level=settings['risk_level']
    )

    if ideas:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        test_message = "üåÖ *–¢–ï–°–¢: –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä—ã–Ω–∫–∞*\n\n"
        test_message += f"üìà *–°–≤–µ–∂–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –≤–∞—Å:*\n\n"

        for i, idea in enumerate(ideas[:3], 1):
            current_price = idea.get('current_price', 0)
            target_price = idea.get('target_price', 0)
            potential_return = ((target_price - current_price) / current_price * 100) if current_price > 0 else 0

            test_message += f"*{i}. {idea['ticker']}*\n"
            test_message += f"üí∞ –¶–µ–Ω–∞: {current_price:.2f} ‚ÇΩ ‚Üí üéØ {target_price:.2f} ‚ÇΩ\n"
            test_message += f"üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +{potential_return:.1f}%\n"
            test_message += f"üìù {idea['reasoning'][:100]}...\n\n"

        test_message += "_–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ù–∞—Å—Ç–æ—è—â–∏–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ 9:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ._"

        await message.answer(test_message, parse_mode="Markdown")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞")

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio"),
            InlineKeyboardButton(text="üí° –ò–¥–µ–∏", callback_data="get_ideas")
        ],
        [
            InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="history"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ])

    welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Invest Bot!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üí° –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –æ—Ç AI
‚Ä¢ üíº –£–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä—ã–Ω–∫–µ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """

    await callback.message.edit_text(welcome_text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()
