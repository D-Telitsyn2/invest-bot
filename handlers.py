import asyncio
import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from gpt_client import XAIClient
from database import get_user_portfolio, save_order, get_order_history, create_user, update_user_activity, get_user_settings, update_user_settings, get_user_trading_stats

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class InvestmentStates(StatesGroup):
    waiting_for_confirmation = State()
    waiting_for_amount = State()
    waiting_for_risk_level = State()
    waiting_for_max_amount = State()
    waiting_for_custom_price = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ü–µ–Ω—ã
    waiting_for_target_ticker = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã
    waiting_for_target_price = State()   # –û–∂–∏–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (@{message.from_user.username})")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    await update_user_activity(message.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio"),
            InlineKeyboardButton(text="üí° –ò–¥–µ–∏", callback_data="get_ideas")
        ],
        [
            InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π", callback_data="analyze_menu"),
            InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")
        ],
        [
            InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="finances"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ])

    welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Invest Bot!*

–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ä—ã–Ω–∫–µ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ üß† **AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –æ—Ç xAI Grok
‚Ä¢ üìä **–ê–Ω–∞–ª–∏–∑ MOEX** ‚Äî –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö –∞–∫—Ü–∏–π –ø–æ —Ç–∏–∫–µ—Ä—É
‚Ä¢ üíº **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º** ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
‚Ä¢ üéØ **–¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã** ‚Äî –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π
‚Ä¢ üìà **–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π** ‚Äî –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
‚Ä¢ üîî **–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã

*–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
‚úÖ –î–≤–æ–π–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚úÖ Sandbox-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚úÖ –ù–∏–∫–∞–∫–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """

    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(Command("portfolio"))
async def cmd_portfolio(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
    try:
        await message.answer("üìä –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")

        portfolio = await get_user_portfolio(message.from_user.id)

        if not portfolio:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí° –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏", callback_data="get_ideas")]
            ])
            await message.answer("üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç\n\n–ù–∞—á–Ω–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å!", reply_markup=keyboard)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        from market_data import market_data
        tickers = [pos['ticker'] for pos in portfolio]
        current_prices = await market_data.get_multiple_moex_prices(tickers)

        portfolio_text = "üíº *–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:*\n\n"
        total_value = 0
        total_invested = 0

        for position in portfolio:
            ticker = position['ticker']
            quantity = position['quantity']
            avg_price = position['avg_price']

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å –±–∏—Ä–∂–∏
            current_price = current_prices.get(ticker, position.get('current_price', avg_price))
            current_value = quantity * current_price
            invested_value = quantity * avg_price
            profit_loss = current_value - invested_value
            profit_percent = (profit_loss / invested_value * 100) if invested_value > 0 else 0

            profit_emoji = "üìà" if profit_loss >= 0 else "üìâ"
            profit_sign = "+" if profit_loss >= 0 else ""

            portfolio_text += f"üìà `{ticker}`: {quantity} —à—Ç.\n"
            portfolio_text += f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.2f} ‚ÇΩ\n"
            portfolio_text += f"üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} ‚ÇΩ\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω–µ
            target_price = position.get('target_price', 0)
            if target_price > 0:
                target_profit = ((target_price - avg_price) / avg_price) * 100
                portfolio_text += f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {target_price:.2f} ‚ÇΩ (+{target_profit:.1f}%)\n"

            portfolio_text += f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {current_value:.2f} ‚ÇΩ\n"
            portfolio_text += f"{profit_emoji} P&L: {profit_sign}{profit_loss:.2f} ‚ÇΩ ({profit_sign}{profit_percent:.1f}%)\n\n"

            total_value += current_value
            total_invested += invested_value

        total_profit = total_value - total_invested
        total_profit_percent = (total_profit / total_invested * 100) if total_invested > 0 else 0
        total_emoji = "üìà" if total_profit >= 0 else "üìâ"
        total_sign = "+" if total_profit >= 0 else ""

        portfolio_text += f"üíé *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f} ‚ÇΩ*\n"
        portfolio_text += f"üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_invested:.2f} ‚ÇΩ\n"
        portfolio_text += f"{total_emoji} *–û–±—â–∏–π P&L: {total_sign}{total_profit:.2f} ‚ÇΩ ({total_sign}{total_profit_percent:.1f}%)*"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üéØ –¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã", callback_data="target_prices"),
                InlineKeyboardButton(text="üí° –ù–æ–≤—ã–µ –∏–¥–µ–∏", callback_data="get_ideas")
            ],
            [
                InlineKeyboardButton(text="üóëÔ∏è –ü—Ä–æ–¥–∞—Ç—å –∞–∫—Ü–∏–∏", callback_data="sell_stock")
            ]
        ])

        await message.answer(portfolio_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è")

@router.message(Command("target"))
async def cmd_target_price(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        portfolio = await get_user_portfolio(user_id)

        if not portfolio:
            await message.answer("üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ /ideas")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã
        target_text = "üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏*\n\n"
        target_text += "–í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏:\n\n"

        for i, pos in enumerate(portfolio, 1):
            ticker = pos['ticker']
            current_price = pos.get('current_price', pos['avg_price'])
            target_price = pos.get('target_price', 0)

            target_text += f"{i}. `{ticker}`\n"
            target_text += f"   üí∞ –¢–µ–∫—É—â–∞—è: {current_price:.2f} ‚ÇΩ\n"

            if target_price > 0:
                target_text += f"   üéØ –¶–µ–ª–µ–≤–∞—è: {target_price:.2f} ‚ÇΩ\n"
                profit_percent = ((target_price - pos['avg_price']) / pos['avg_price']) * 100
                target_text += f"   üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +{profit_percent:.1f}%\n"
            else:
                target_text += f"   üéØ –¶–µ–ª–µ–≤–∞—è: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
            target_text += "\n"

        target_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        target_text += "`/target –¢–ò–ö–ï–† —Ü–µ–Ω–∞`\n\n"
        target_text += "–ù–∞–ø—Ä–∏–º–µ—Ä: `/target SBER 350.5`"

        await message.answer(target_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

@router.message(Command("ideas"))
async def cmd_ideas(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏"""
    await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = await get_user_settings(message.from_user.id)

        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not settings:
            logger.warning(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            settings = {
                'max_investment_amount': 10000,
                'risk_level': 'medium'
            }

        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
        xai_client = XAIClient()
        ideas = await xai_client.get_investment_ideas(
            budget=settings['max_investment_amount'],
            risk_level=settings['risk_level']
        )

        if not ideas:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
        await state.update_data(investment_ideas=ideas)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–¥–µ—è–º–∏
        ideas_text = "üéØ *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏:*\n\n"
        keyboard_buttons = []

        for i, idea in enumerate(ideas[:7], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 7 –∏–¥–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            ticker = idea.get('ticker', 'N/A')
            price = idea.get('price', 0)
            target_price = idea.get('target_price', 0)
            action = idea.get('action', 'BUY')
            reasoning = idea.get('reasoning', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            potential_return = 0
            if price > 0 and target_price > 0:
                potential_return = ((target_price - price) / price) * 100

            ideas_text += f"*{i}.* `{ticker}`\n"
            ideas_text += f"üí∞ –¶–µ–Ω–∞: {price:.2f} ‚ÇΩ\n"
            ideas_text += f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {target_price:.2f} ‚ÇΩ (+{potential_return:.1f}%)\n"
            ideas_text += f"üí° {reasoning}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–ø–æ 2 –≤ —Ä—è–¥—É)
            row_index = (i - 1) // 2  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Ä—è–¥–∞ (0, 1, 2, 3, 4)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            while len(keyboard_buttons) <= row_index:
                keyboard_buttons.append([])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä—è–¥
            keyboard_buttons[row_index].append(
                InlineKeyboardButton(text=f"üí≥ {ticker}", callback_data=f"select_idea_{i-1}")
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–¥–µ–π –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–¥–µ–∏", callback_data="get_ideas")
        ])
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await message.answer(ideas_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π")

@router.message(Command("analyze"))
async def cmd_analyze_stock(message: Message):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–∫–µ—Ä—É"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split()

    if len(command_parts) < 2:
        await message.answer(
            "üìà *–ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π*\n\n"
            "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "`/analyze –¢–ò–ö–ï–†`\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
            "‚Ä¢ `/analyze SBER` - –∞–Ω–∞–ª–∏–∑ –°–±–µ—Ä–±–∞–Ω–∫–∞\n"
            "‚Ä¢ `/analyze YNDX` - –∞–Ω–∞–ª–∏–∑ –Ø–Ω–¥–µ–∫—Å–∞\n"
            "‚Ä¢ `/analyze GAZP` - –∞–Ω–∞–ª–∏–∑ –ì–∞–∑–ø—Ä–æ–º–∞\n\n"
            "üí° –ú–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∞–∫—Ü–∏–∏ —Å MOEX",
            parse_mode="Markdown"
        )
        return

    ticker = command_parts[1].upper().strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–∫–µ—Ä–∞
    if not ticker.isalpha() or len(ticker) > 10:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: SBER, YNDX)")
        return

    await message.answer(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞–∫—Ü–∏—é {ticker}...")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
        from gpt_client import analyze_stock

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç GPT
        analysis = await analyze_stock(ticker)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        if "error" in analysis:
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in analysis["error"].lower() or "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in analysis["error"].lower():
                await message.answer(
                    f"‚ùå *–ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ MOEX*\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∞–∫—Ü–∏—é.\n\n"
                    "üí° –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: SBER, GAZP, LKOH, YNDX, OZON",
                    parse_mode="Markdown"
                )
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis['error']}")
            return

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞
        current_price = analysis.get("current_price")
        target_price = analysis.get("target_price")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω
        if target_price and current_price:
            # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π (–±–æ–ª–µ–µ —á–µ–º –≤ 5 —Ä–∞–∑), –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
            if target_price > current_price * 5 or target_price < current_price * 0.2:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ {target_price} –¥–ª—è {ticker} –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π {current_price}, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º")
                recommendation = analysis.get('recommendation', 'HOLD')
                if recommendation == 'BUY':
                    target_price = current_price * 1.20  # +20%
                elif recommendation == 'SELL':
                    target_price = current_price * 0.85  # -15%
                else:  # HOLD
                    target_price = current_price * 1.05  # +5%
                analysis['target_price'] = round(target_price, 2)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º
        recommendation_emoji = {
            "BUY": "üü¢ –ü–û–ö–£–ü–ê–¢–¨",
            "HOLD": "üü° –î–ï–†–ñ–ê–¢–¨",
            "SELL": "üî¥ –ü–†–û–î–ê–í–ê–¢–¨"
        }.get(analysis.get("recommendation", "HOLD"), "üü° –î–ï–†–ñ–ê–¢–¨")

        risk_emoji = {
            "low": "üü¢ –ù–∏–∑–∫–∏–π",
            "medium": "üü° –°—Ä–µ–¥–Ω–∏–π",
            "high": "üî¥ –í—ã—Å–æ–∫–∏–π"
        }.get(analysis.get("risk_level", "medium"), "üü° –°—Ä–µ–¥–Ω–∏–π")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (–ª–∏–±–æ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞, –ª–∏–±–æ –æ—Ç–¥–µ–ª—å–Ω–æ —Å MOEX)
        current_price = analysis.get("current_price")
        if not current_price:
            from market_data import market_data
            current_prices = await market_data.get_multiple_moex_prices([ticker])
            current_price = current_prices.get(ticker)

        analysis_text = f"üìä *–ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏ {ticker}*\n\n"

        if current_price:
            analysis_text += f"üí∞ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* {current_price:.2f} ‚ÇΩ\n"

        if analysis.get("target_price"):
            analysis_text += f"üéØ *–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞:* {analysis['target_price']:.2f} ‚ÇΩ\n"

            if current_price and analysis.get("target_price"):
                potential = ((analysis['target_price'] - current_price) / current_price) * 100
                potential_emoji = "üìà" if potential > 0 else "üìâ"
                analysis_text += f"{potential_emoji} *–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:* {potential:+.1f}%\n"

        analysis_text += f"\n{recommendation_emoji}\n"
        analysis_text += f"‚ö†Ô∏è *–†–∏—Å–∫:* {risk_emoji}\n\n"

        if analysis.get("analysis"):
            analysis_text += f"üìù *–ê–Ω–∞–ª–∏–∑:*\n{analysis['analysis']}\n\n"

        if analysis.get("pros"):
            analysis_text += "‚úÖ *–ü–ª—é—Å—ã:*\n"
            for pro in analysis['pros']:
                analysis_text += f"‚Ä¢ {pro}\n"
            analysis_text += "\n"

        if analysis.get("cons"):
            analysis_text += "‚ùå *–ú–∏–Ω—É—Å—ã:*\n"
            for con in analysis['cons']:
                analysis_text += f"‚Ä¢ {con}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üí° –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏", callback_data="get_ideas"),
                InlineKeyboardButton(text="üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")
            ]
        ])

        await message.answer(analysis_text, reply_markup=keyboard, parse_mode="Markdown")

        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏ {ticker} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–∫—Ü–∏–∏ {ticker}: {e}")
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ü–∏—é {ticker}\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ê–∫—Ü–∏—è –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ MOEX\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∞–∫—Ü–∏—é."
        )

@router.callback_query(F.data == "notification_settings")
async def show_notification_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        settings = await get_user_settings(callback.from_user.id)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not settings:
            settings = {
                'notifications': True,
                'daily_market_analysis': True,
                'weekly_portfolio_report': True,
                'target_price_alerts': True,
                'price_updates': False
            }

        settings_text = f"""
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

üìä *–û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {'‚úÖ' if settings.get('notifications', True) else '‚ùå'}

*–î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
üåÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞* (9:00): {'‚úÖ' if settings.get('daily_market_analysis', True) else '‚ùå'}
üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç* (–≤—Å 20:00): {'‚úÖ' if settings.get('weekly_portfolio_report', True) else '‚ùå'}
üéØ *–¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã* (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω, –ø–Ω-–ø—Ç 10-18): {'‚úÖ' if settings.get('target_price_alerts', True) else '‚ùå'}
‚è∞ *–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω* (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω, –ø–Ω-–ø—Ç 10-18): {'‚úÖ' if settings.get('price_updates', False) else '‚ùå'}
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    callback_data="toggle_notifications"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞",
                    callback_data="toggle_daily_analysis"
                ),
                InlineKeyboardButton(
                    text="üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç",
                    callback_data="toggle_weekly_report"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üéØ –¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã",
                    callback_data="toggle_target_alerts"
                ),
                InlineKeyboardButton(
                    text="‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω",
                    callback_data="toggle_price_updates"
                )
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")
            ]
        ])

        await callback.message.edit_text(settings_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    await callback.answer()

@router.callback_query(F.data == "toggle_daily_analysis")
async def toggle_daily_analysis(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        settings = await get_user_settings(callback.from_user.id)
        if not settings:
            settings = {'daily_market_analysis': True}

        new_value = not settings.get('daily_market_analysis', True)

        await update_user_settings(callback.from_user.id, daily_market_analysis=new_value)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ -> {new_value}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await show_notification_settings(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_daily_analysis: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

@router.callback_query(F.data == "toggle_weekly_report")
async def toggle_weekly_report(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        settings = await get_user_settings(callback.from_user.id)
        if not settings:
            settings = {'weekly_portfolio_report': True}

        new_value = not settings.get('weekly_portfolio_report', True)

        await update_user_settings(callback.from_user.id, weekly_portfolio_report=new_value)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç -> {new_value}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await show_notification_settings(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_weekly_report: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

@router.callback_query(F.data == "toggle_target_alerts")
async def toggle_target_alerts(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω–∞—Ö"""
    try:
        settings = await get_user_settings(callback.from_user.id)
        if not settings:
            settings = {'target_price_alerts': True}
        new_value = not settings.get('target_price_alerts', True)

        await update_user_settings(callback.from_user.id, target_price_alerts=new_value)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}: —Ü–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã -> {new_value}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await show_notification_settings(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_target_alerts: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

@router.callback_query(F.data == "toggle_price_updates")
async def toggle_price_updates(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω"""
    try:
        settings = await get_user_settings(callback.from_user.id)
        if not settings:
            settings = {'price_updates': False}

        new_value = not settings.get('price_updates', False)

        await update_user_settings(callback.from_user.id, price_updates=new_value)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}: –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω -> {new_value}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await show_notification_settings(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_price_updates: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

@router.message(F.text.regexp(r'^/target\s+([A-Z]{3,5})\s+(\d+\.?\d*)$'))
async def set_target_price(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä –∏ —Ü–µ–Ω—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        import re
        match = re.match(r'^/target\s+([A-Z]{3,5})\s+(\d+\.?\d*)$', message.text)
        if not match:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/target –¢–ò–ö–ï–† —Ü–µ–Ω–∞`\n–ù–∞–ø—Ä–∏–º–µ—Ä: `/target SBER 350.5`", parse_mode="Markdown")
            return

        ticker = match.group(1).upper()
        target_price = float(match.group(2))
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        portfolio = await get_user_portfolio(user_id)
        position = next((p for p in portfolio if p['ticker'] == ticker), None)

        if not position:
            await message.answer(f"‚ùå –ü–æ–∑–∏—Ü–∏—è `{ticker}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ.\n–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ—ë —á–µ—Ä–µ–∑ /ideas", parse_mode="Markdown")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É
        from database import update_target_price
        await update_target_price(user_id, ticker, target_price)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
        avg_price = position['avg_price']
        current_price = position.get('current_price', avg_price)
        quantity = position['quantity']

        profit_from_avg = ((target_price - avg_price) / avg_price) * 100
        profit_from_current = ((target_price - current_price) / current_price) * 100

        profit_amount = (target_price - avg_price) * quantity

        success_text = f"‚úÖ *–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!*\n\n"
        success_text += f"üìä `{ticker}`\n"
        success_text += f"üí∞ –í–∞—à–∞ —Ü–µ–Ω–∞: {avg_price:.2f} ‚ÇΩ\n"
        success_text += f"üíµ –¢–µ–∫—É—â–∞—è: {current_price:.2f} ‚ÇΩ\n"
        success_text += f"üéØ –¶–µ–ª–µ–≤–∞—è: {target_price:.2f} ‚ÇΩ\n\n"
        success_text += f"üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ç –ø–æ–∫—É–ø–∫–∏: +{profit_from_avg:.1f}%\n"
        success_text += f"üìä –û—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {profit_from_current:+.1f}%\n"
        success_text += f"üíé –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_amount:+,.0f} ‚ÇΩ\n\n"
        success_text += f"üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç {target_price:.2f} ‚ÇΩ"

        await message.answer(success_text, parse_mode="Markdown")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É {target_price} –¥–ª—è {ticker}")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 350.5")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã")

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)

@router.callback_query(F.data.startswith("select_idea_"))
async def process_idea_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –∏–¥–µ–∏"""
    idea_index = int(callback.data.split("_")[-1])

    data = await state.get_data()
    ideas = data.get("investment_ideas", [])

    if idea_index < len(ideas):
        selected_idea = ideas[idea_index]

        confirmation_text = f"""
üí° *–í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–¥–µ—è:*

üìà –¢–∏–∫–µ—Ä: *{selected_idea['ticker']}*
üìä –î–µ–π—Å—Ç–≤–∏–µ: *{selected_idea['action']}*
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *{selected_idea['price']:.2f} ‚ÇΩ*
üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: *{selected_idea['target_price']:.2f} ‚ÇΩ*

üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
{selected_idea['reasoning']}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã:
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –ê–≤—Ç–æ —Ü–µ–Ω–∞", callback_data="use_auto_price"),
                InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ—è —Ü–µ–Ω–∞", callback_data="use_custom_price")
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_trade")
            ]
        ])

        await callback.message.answer(confirmation_text, reply_markup=keyboard, parse_mode="Markdown")
        await state.update_data(selected_idea=selected_idea)

    await callback.answer()

@router.callback_query(F.data == "use_auto_price")
async def use_auto_price(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã"""
    await callback.answer()
    await callback.message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(InvestmentStates.waiting_for_amount)

@router.callback_query(F.data == "use_custom_price")
async def use_custom_price(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ü–µ–Ω—ã"""
    await callback.answer()
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –∑–∞ –æ–¥–Ω—É –∞–∫—Ü–∏—é (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(InvestmentStates.waiting_for_custom_price)

@router.message(InvestmentStates.waiting_for_custom_price)
async def process_custom_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ü–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        data = await state.get_data()
        logger.info(f"process_custom_price - –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")

        custom_price = float(message.text.replace(",", "."))

        if custom_price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏
        if 'custom_sell_ticker' in data:
            logger.info("process_custom_price - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ü–†–û–î–ê–ñ–£")
            # –≠—Ç–æ –ø—Ä–æ–¥–∞–∂–∞
            ticker = data.get("custom_sell_ticker")
            sell_quantity = data.get("sell_quantity")
            avg_price = data.get("avg_price")

            logger.info(f"process_custom_price - ticker: {ticker}, sell_quantity: {sell_quantity}, avg_price: {avg_price}")

            if not all([ticker, sell_quantity]):
                logger.error(f"process_custom_price - –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ticker={ticker}, sell_quantity={sell_quantity}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                await state.clear()
                return

            total_amount = sell_quantity * custom_price
            profit_loss = (custom_price - avg_price) * sell_quantity

            confirmation_text = f"""
‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:*

üìâ –ü—Ä–æ–¥–∞—Ç—å: `{ticker}`
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{sell_quantity} —à—Ç.*
üí∞ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: *{custom_price:.2f} ‚ÇΩ*
üíé –ü–æ–ª—É—á–∏—Ç–µ: *{total_amount:.2f} ‚ÇΩ*
üìà P&L: *{profit_loss:+.2f} ‚ÇΩ*

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É?
            """

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–∞—Ç—å", callback_data=f"final_sell_{ticker}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
                ]
            ])

            await message.answer(confirmation_text, reply_markup=keyboard, parse_mode="Markdown")
            await state.update_data(sell_price=custom_price, total_amount=total_amount)

        else:
            logger.info("process_custom_price - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ü–û–ö–£–ü–ö–£")
            # –≠—Ç–æ –ø–æ–∫—É–ø–∫–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
            selected_idea = data.get("selected_idea")
            logger.info(f"process_custom_price - selected_idea: {selected_idea}")

            if not selected_idea:
                logger.error("process_custom_price - selected_idea –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É")
                await message.answer("‚ùå –ò–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /ideas")
                await state.clear()
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –∏–¥–µ–µ
            selected_idea['price'] = custom_price
            await state.update_data(selected_idea=selected_idea)

            await message.answer(f"‚úÖ –¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {custom_price:.2f} ‚ÇΩ\n\nüí∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):")
            await state.set_state(InvestmentStates.waiting_for_amount)

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250.50)")

@router.message(InvestmentStates.waiting_for_amount)
async def process_investment_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        amount = float(message.text.replace(",", "."))

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        data = await state.get_data()
        selected_idea = data.get("selected_idea")

        if not selected_idea:
            await message.answer("‚ùå –ò–¥–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /ideas")
            await state.clear()
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
        quantity = int(amount / selected_idea['price'])
        total_cost = quantity * selected_idea['price']

        if quantity == 0:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏")
            return

        confirmation_text = f"""
‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:*

üìà –¢–∏–∫–µ—Ä: *{selected_idea['ticker']}*
üìä –û–ø–µ—Ä–∞—Ü–∏—è: *{selected_idea['action']}*
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{quantity} —à—Ç.*
üí∞ –¶–µ–Ω–∞ –∑–∞ –∞–∫—Ü–∏—é: *{selected_idea['price']:.2f} ‚ÇΩ*
üíé –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: *{total_cost:.2f} ‚ÇΩ*

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É?
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_trade"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_trade")
            ]
        ])

        await message.answer(confirmation_text, reply_markup=keyboard, parse_mode="Markdown")
        await state.update_data(quantity=quantity, total_cost=total_cost)
        await state.set_state(InvestmentStates.waiting_for_confirmation)

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 5000.50)")

@router.callback_query(F.data == "confirm_trade")
async def confirm_trade(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
    try:
        data = await state.get_data()
        selected_idea = data.get("selected_idea")
        quantity = data.get("quantity")
        total_cost = data.get("total_cost")

        if not all([selected_idea, quantity, total_cost]):
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = await save_order(
            user_id=callback.from_user.id,
            ticker=selected_idea['ticker'],
            quantity=quantity,
            price=selected_idea['price'],
            order_type=selected_idea['action'],
            total_amount=total_cost
        )

        if success:
            await callback.message.edit_text(
                f"‚úÖ *–°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n"
                f"üìà –¢–∏–∫–µ—Ä: `{selected_idea['ticker']}`\n"
                f"üìä –û–ø–µ—Ä–∞—Ü–∏—è: *{selected_idea['action']}*\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{quantity} —à—Ç.*\n"
                f"üí∞ –¶–µ–Ω–∞: *{selected_idea['price']:.2f} ‚ÇΩ*\n"
                f"üíé –°—É–º–º–∞: *{total_cost:.2f} ‚ÇΩ*\n\n"
                f"–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å!",
                reply_markup=None,
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=None
            )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        await state.clear()

    await callback.answer()

@router.callback_query(F.data == "sell_stock")
async def sell_stock_selection(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∞–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        portfolio = await get_user_portfolio(callback.from_user.id)

        if not portfolio:
            await callback.message.answer("üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç")
            await callback.answer()
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ü–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        keyboard_buttons = []
        for position in portfolio:
            ticker = position['ticker']
            quantity = position['quantity']
            button_text = f"üìâ {ticker} ({quantity} —à—Ç.)"
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"sell_{ticker}"
            )])

        keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.answer(
            "üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:*",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è")

    await callback.answer()

@router.callback_query(F.data.startswith("sell_auto_"))
async def confirm_sell_auto_price(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–∞–∂–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ"""
    ticker = callback.data.replace("sell_auto_", "")

    try:
        data = await state.get_data()
        current_price = data.get("current_price")
        sell_quantity = data.get("sell_quantity")
        avg_price = data.get("avg_price")

        if not all([current_price, sell_quantity]):
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
            await state.clear()
            return

        total_amount = sell_quantity * current_price
        profit_loss = (current_price - avg_price) * sell_quantity

        confirmation_text = f"""
‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:*

üìâ –ü—Ä–æ–¥–∞—Ç—å: `{ticker}`
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{sell_quantity} —à—Ç.*
üí∞ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: *{current_price:.2f} ‚ÇΩ*
üíé –ü–æ–ª—É—á–∏—Ç–µ: *{total_amount:.2f} ‚ÇΩ*
üìà P&L: *{profit_loss:+.2f} ‚ÇΩ*

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É?
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–∞—Ç—å", callback_data=f"final_sell_{ticker}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
            ]
        ])

        await callback.message.answer(confirmation_text, reply_markup=keyboard, parse_mode="Markdown")
        await state.update_data(sell_price=current_price, total_amount=total_amount)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ {ticker}: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–∞–∂–∏")

    await callback.answer()

@router.callback_query(F.data.startswith("sell_custom_"))
async def sell_custom_price(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–∞–∂–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ü–µ–Ω–µ"""
    ticker = callback.data.replace("sell_custom_", "")

    await callback.answer()
    await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è {ticker} (–≤ —Ä—É–±–ª—è—Ö):")

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∏–º custom_sell_ticker
    data = await state.get_data()
    logger.info(f"sell_custom_price - –î–∞–Ω–Ω—ã–µ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è custom_sell_ticker: {data}")
    data['custom_sell_ticker'] = ticker
    await state.update_data(**data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    updated_data = await state.get_data()
    logger.info(f"sell_custom_price - –î–∞–Ω–Ω—ã–µ –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è custom_sell_ticker: {updated_data}")

    await state.set_state(InvestmentStates.waiting_for_custom_price)

@router.callback_query(F.data.startswith("final_sell_"))
async def final_sell_confirmation(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
    ticker = callback.data.replace("final_sell_", "")

    try:
        data = await state.get_data()
        sell_price = data.get("sell_price")
        sell_quantity = data.get("sell_quantity")
        total_amount = data.get("total_amount")

        if not all([sell_price, sell_quantity, total_amount]):
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
            await state.clear()
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É)
        success = await save_order(
            user_id=callback.from_user.id,
            ticker=ticker,
            quantity=sell_quantity,
            price=sell_price,
            order_type="SELL",
            total_amount=total_amount
        )

        if success:
            await callback.message.edit_text(
                f"‚úÖ *–ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n"
                f"üìâ –ü—Ä–æ–¥–∞–Ω–æ: `{ticker}`\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{sell_quantity} —à—Ç.*\n"
                f"üí∞ –¶–µ–Ω–∞: *{sell_price:.2f} ‚ÇΩ*\n"
                f"üíé –ü–æ–ª—É—á–µ–Ω–æ: *{total_amount:.2f} ‚ÇΩ*",
                reply_markup=None,
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏",
                reply_markup=None
            )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ {ticker}: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏")
        await state.clear()

    await callback.answer()


@router.callback_query(F.data == "cancel_sell")
async def cancel_sell(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    await callback.message.answer("‚ùå –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("sell_"))
async def process_sell_stock(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏"""
    if callback.data == "sell_stock":
        await sell_stock_selection(callback, state)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ callback –¥–ª—è auto, custom –∏–ª–∏ final –ø—Ä–æ–¥–∞–∂–∏
    if (callback.data.startswith("sell_auto_") or
        callback.data.startswith("sell_custom_") or
        callback.data.startswith("final_sell_")):
        return  # –≠—Ç–∏ callback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏

    ticker = callback.data.replace("sell_", "")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
        portfolio = await get_user_portfolio(callback.from_user.id)
        position = next((p for p in portfolio if p['ticker'] == ticker), None)

        if not position:
            await callback.message.answer(f"‚ùå –ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ")
            await callback.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        from market_data import market_data
        current_price = await market_data.get_moex_price(ticker)
        if not current_price:
            current_price = position.get('current_price', position['avg_price'])

        quantity = position['quantity']
        avg_price = position['avg_price']
        current_value = quantity * current_price
        invested_value = quantity * avg_price
        profit_loss = current_value - invested_value

        confirmation_text = f"""
üóëÔ∏è *–ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π {ticker}*

üìä –í –ø–æ—Ä—Ç—Ñ–µ–ª–µ: *{quantity} —à—Ç.*
üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: *{avg_price:.2f} ‚ÇΩ*
üí± –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *{current_price:.2f} ‚ÇΩ*
üíé –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: *{current_value:.2f} ‚ÇΩ*
üìà P&L: *{profit_loss:+.2f} ‚ÇΩ*

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã:
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –ü–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ", callback_data=f"sell_auto_{ticker}"),
                InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ—è —Ü–µ–Ω–∞", callback_data=f"sell_custom_{ticker}")
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
            ]
        ])

        await callback.message.answer(confirmation_text, reply_markup=keyboard, parse_mode="Markdown")
        await state.update_data(sell_ticker=ticker, current_price=current_price, sell_quantity=quantity, avg_price=avg_price)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–∞–∂–∏ {ticker}: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–∞–∂–∏")

    await callback.answer()

@router.callback_query(F.data == "cancel_trade")
async def cancel_trade(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏"""
    await callback.message.answer("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await callback.answer()

@router.message(Command("history"))
async def cmd_history(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        history = await get_order_history(message.from_user.id)

        if not history:
            await message.answer("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞")
            return

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã
        header = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n<pre>"
        table = "–î–∞—Ç–∞  | –í—Ä–µ–º—è | –¢–∏–ø  | –¢–∏–∫–µ—Ä | –ö–æ–ª-–≤–æ |  –¶–µ–Ω–∞ \n"
        table += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        for order in history[-15:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –æ–ø–µ—Ä–∞—Ü–∏–π
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            created_at = order.get('created_at')
            if created_at:
                if isinstance(created_at, str):
                    try:
                        from datetime import datetime
                        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        date_str = dt.strftime('%d.%m')
                        time_str = dt.strftime('%H:%M')
                    except:
                        date_str = created_at.split('T')[0][-5:]
                        time_str = created_at.split('T')[1][:5] if 'T' in created_at else '     '
                else:
                    date_str = created_at.strftime('%d.%m')
                    time_str = created_at.strftime('%H:%M')
            else:
                date_str = "  .  "
                time_str = "  :  "

            # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation_type = order.get('operation_type', '').upper()
            if operation_type == 'BUY':
                op_type = "BUY"
            elif operation_type == 'SELL':
                op_type = "SELL"
            else:
                op_type = "   "

            ticker = order.get('ticker', '')[:5].ljust(5)
            quantity = f"{order.get('quantity', 0):>6}"
            price = f"{order.get('price', 0):>6.1f}"

            table += f"{date_str:<5} | {time_str:<5} | {op_type:<4} | {ticker:<5} | {quantity} | {price}\n"

        table += "</pre>\n\nüí° <i>–õ–µ–≥–µ–Ω–¥–∞:</i> BUY = –ü–æ–∫—É–ø–∫–∞, SELL = –ü—Ä–æ–¥–∞–∂–∞"

        await message.answer(header + table, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π")


@router.message(Command("settings"))
async def cmd_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–æ–º–∞–Ω–¥–∞)"""
    try:
        settings = await get_user_settings(message.from_user.id)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not settings:
            settings = {
                'risk_level': 'medium',
                'max_investment_amount': 10000,
                'notifications': True
            }

        risk_levels = {
            'low': 'üü¢ –ù–∏–∑–∫–∏–π',
            'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
            'high': 'üî¥ –í—ã—Å–æ–∫–∏–π'
        }

        settings_text = f"""
‚öôÔ∏è *–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*

üéØ *–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:* {risk_levels.get(settings.get('risk_level', 'medium'), settings.get('risk_level', 'medium'))}
üí∞ *–ú–∞–∫—Å. —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:* {settings.get('max_investment_amount', 10000):,.0f} ‚ÇΩ
üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.get('notifications', True) else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üéØ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", callback_data="set_risk"),
                InlineKeyboardButton(text="üí∞ –ú–∞–∫—Å. —Å—É–º–º–∞", callback_data="set_max_amount")
            ],
            [
                InlineKeyboardButton(text="üîî –û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications"),
                InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]
        ])

        await message.answer(settings_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data == "portfolio")
async def show_portfolio_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å —á–µ—Ä–µ–∑ callback"""
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º user_id –Ω–∞–ø—Ä—è–º—É—é
    try:
        await callback.answer("üìä –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        portfolio = await get_user_portfolio(callback.from_user.id)
        if not portfolio:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí° –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏", callback_data="get_ideas")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            await callback.message.edit_text("üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç\n\n–ù–∞—á–Ω–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å!", reply_markup=keyboard)
            return
        from market_data import market_data
        tickers = [pos['ticker'] for pos in portfolio]
        current_prices = await market_data.get_multiple_moex_prices(tickers)
        portfolio_text = "üíº *–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:*\n\n"
        total_value = 0
        total_invested = 0
        for position in portfolio:
            ticker = position['ticker']
            quantity = position['quantity']
            avg_price = position['avg_price']
            current_price = current_prices.get(ticker, position.get('current_price', avg_price))
            current_value = quantity * current_price
            invested_value = quantity * avg_price
            profit_loss = current_value - invested_value
            profit_percent = (profit_loss / invested_value * 100) if invested_value > 0 else 0
            profit_emoji = "üìà" if profit_loss >= 0 else "üìâ"
            profit_sign = "+" if profit_loss >= 0 else ""
            portfolio_text += f"üìà `{ticker}`: {quantity} —à—Ç.\n"
            portfolio_text += f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.2f} ‚ÇΩ\n"
            portfolio_text += f"üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} ‚ÇΩ\n"
            portfolio_text += f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {current_value:.2f} ‚ÇΩ\n"
            portfolio_text += f"{profit_emoji} P&L: {profit_sign}{profit_loss:.2f} ‚ÇΩ ({profit_sign}{profit_percent:.1f}%)\n\n"
            total_value += current_value
            total_invested += invested_value
        if total_invested > 0:
            total_profit = total_value - total_invested
            total_percent = (total_profit / total_invested * 100)
            total_emoji = "üìà" if total_profit >= 0 else "üìâ"
            total_sign = "+" if total_profit >= 0 else ""
            portfolio_text += f"\n{total_emoji} *–û–±—â–∏–π P&L:* {total_sign}{total_profit:.2f} ‚ÇΩ ({total_sign}{total_percent:.1f}%)"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üóëÔ∏è –ü—Ä–æ–¥–∞—Ç—å –∞–∫—Ü–∏–∏", callback_data="sell_stock"),
                InlineKeyboardButton(text="üí° –ù–æ–≤—ã–µ –∏–¥–µ–∏", callback_data="get_ideas")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            ]
        ])

        await callback.message.edit_text(portfolio_text, parse_mode="Markdown", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è —á–µ—Ä–µ–∑ callback: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

@router.callback_query(F.data == "target_prices")
async def show_target_prices(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–µ–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
    try:
        await callback.answer("üéØ –ó–∞–≥—Ä—É–∂–∞—é —Ü–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã...")

        user_id = callback.from_user.id
        portfolio = await get_user_portfolio(user_id)

        if not portfolio:
            await callback.message.answer("üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ /ideas")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã
        target_text = "üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏*\n\n"

        for i, pos in enumerate(portfolio, 1):
            ticker = pos['ticker']
            current_price = pos.get('current_price', pos['avg_price'])
            target_price = pos.get('target_price', 0)
            avg_price = pos['avg_price']

            target_text += f"{i}. `{ticker}`\n"
            target_text += f"   üí∞ –í–∞—à–∞ —Ü–µ–Ω–∞: {avg_price:.2f} ‚ÇΩ\n"
            target_text += f"   üíµ –¢–µ–∫—É—â–∞—è: {current_price:.2f} ‚ÇΩ\n"

            if target_price > 0:
                target_text += f"   üéØ –¶–µ–ª–µ–≤–∞—è: {target_price:.2f} ‚ÇΩ\n"
                profit_percent = ((target_price - avg_price) / avg_price) * 100
                profit_from_current = ((target_price - current_price) / current_price) * 100
                target_text += f"   üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +{profit_percent:.1f}%"
                if profit_from_current != profit_percent:
                    target_text += f" (–æ—Ç —Ç–µ–∫—É—â–µ–π: {profit_from_current:+.1f}%)"
                target_text += "\n"
            else:
                target_text += f"   üéØ –¶–µ–ª–µ–≤–∞—è: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
            target_text += "\n"

        target_text += "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        target_text += "`/target –¢–ò–ö–ï–† —Ü–µ–Ω–∞`\n\n"
        target_text += "–ù–∞–ø—Ä–∏–º–µ—Ä: `/target SBER 350.5`"

        await callback.message.answer(target_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data == "get_ideas")
async def get_ideas_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ —á–µ—Ä–µ–∑ callback"""
    await callback.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = await get_user_settings(callback.from_user.id)

        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not settings:
            logger.warning(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            settings = {
                'max_investment_amount': 10000,
                'risk_level': 'medium'
            }

        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
        xai_client = XAIClient()
        ideas = await xai_client.get_investment_ideas(
            budget=settings['max_investment_amount'],
            risk_level=settings['risk_level']
        )

        if not ideas:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", reply_markup=keyboard)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
        await state.update_data(investment_ideas=ideas)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–¥–µ—è–º–∏
        ideas_text = "üéØ *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏:*\n\n"
        keyboard_buttons = []

        for i, idea in enumerate(ideas[:7], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 7 –∏–¥–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            ticker = idea.get('ticker', 'N/A')
            price = idea.get('price', 0)
            target_price = idea.get('target_price', 0)
            action = idea.get('action', 'BUY')
            reasoning = idea.get('reasoning', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            potential_return = 0
            if price > 0 and target_price > 0:
                potential_return = ((target_price - price) / price) * 100

            ideas_text += f"*{i}.* `{ticker}`\n"
            ideas_text += f"üí∞ –¶–µ–Ω–∞: {price:.2f} ‚ÇΩ\n"
            ideas_text += f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {target_price:.2f} ‚ÇΩ (+{potential_return:.1f}%)\n"
            ideas_text += f"üí° {reasoning}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–ø–æ 2 –≤ —Ä—è–¥—É)
            row_index = (i - 1) // 2  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Ä—è–¥–∞ (0, 1, 2, 3, 4)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            while len(keyboard_buttons) <= row_index:
                keyboard_buttons.append([])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä—è–¥
            keyboard_buttons[row_index].append(
                InlineKeyboardButton(text=f"üí≥ {ticker}", callback_data=f"select_idea_{i-1}")
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–¥–µ–π –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–¥–µ–∏", callback_data="get_ideas")
        ])
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await callback.message.edit_text(ideas_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π", reply_markup=keyboard)

@router.callback_query(F.data == "finances")
async def show_finances_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        await callback.answer("üí∞ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")

        stats = await get_user_trading_stats(callback.from_user.id)

        if not stats:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            await callback.message.edit_text("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞", reply_markup=keyboard)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        message = "üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"

        # –û–±—â–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        trading = stats.get('trading', {})
        message += "üìä *–¢–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
        message += f"üõí –ü–æ–∫—É–ø–æ–∫: {trading.get('total_buys', 0)}\n"
        message += f"üí∏ –ü—Ä–æ–¥–∞–∂: {trading.get('total_sells', 0)}\n"
        message += f"üí∞ –ö—É–ø–ª–µ–Ω–æ –Ω–∞: {trading.get('total_bought', 0):,.0f} ‚ÇΩ\n"
        message += f"üíé –ü—Ä–æ–¥–∞–Ω–æ –Ω–∞: {trading.get('total_sold', 0):,.0f} ‚ÇΩ\n"
        message += f"‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {trading.get('realized_pnl', 0):+,.0f} ‚ÇΩ\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio = stats.get('portfolio', {})
        message += "üíº *–¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:*\n"
        message += f"üî¢ –ü–æ–∑–∏—Ü–∏–π: {portfolio.get('positions_count', 0)}\n"
        message += f"üí∞ –í–ª–æ–∂–µ–Ω–æ: {portfolio.get('portfolio_cost', 0):,.0f} ‚ÇΩ\n"
        message += f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {portfolio.get('portfolio_value', 0):,.0f} ‚ÇΩ\n"
        message += f"üìà –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {portfolio.get('unrealized_pnl', 0):+,.0f} ‚ÇΩ ({portfolio.get('unrealized_return_pct', 0):+.1f}%)\n\n"

        # –û–±—â–∏–π P&L
        total_pnl = stats.get('total_pnl', 0)
        pnl_emoji = "üìà" if total_pnl >= 0 else "üìâ"
        message += f"{pnl_emoji} *–û–±—â–∏–π P&L: {total_pnl:+,.0f} ‚ÇΩ*\n\n"

        # –¢–æ–ø –ø–æ–∑–∏—Ü–∏–∏
        top_positions = stats.get('top_positions', [])
        if top_positions:
            message += "üèÜ *–¢–æ–ø –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –ø—Ä–∏–±—ã–ª–∏:*\n"
            for i, pos in enumerate(top_positions[:3], 1):
                pnl_emoji = "üìà" if pos['unrealized_pnl'] >= 0 else "üìâ"
                message += f"{i}. {pos['ticker']}: {pnl_emoji} {pos['unrealized_pnl']:+,.0f} ‚ÇΩ ({pos['return_pct']:+.1f}%)\n"

        # –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        profitable_trades = stats.get('profitable_trades', [])
        if profitable_trades:
            message += "\nüíé *–õ—É—á—à–∏–µ —Å–¥–µ–ª–∫–∏:*\n"
            for i, trade in enumerate(profitable_trades[:3], 1):
                date_str = trade['created_at'].strftime('%d.%m.%Y') if trade.get('created_at') else 'N/A'
                message += f"{i}. {trade['ticker']}: +{trade['profit_loss']:,.0f} ‚ÇΩ ({date_str})\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

        await callback.message.edit_text(message, parse_mode="Markdown", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", reply_markup=keyboard)

@router.message(Command("finances"))
async def cmd_finances(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–æ–º–∞–Ω–¥–∞)"""
    try:
        stats = await get_user_trading_stats(message.from_user.id)

        if not stats:
            await message.answer("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞")
            return

        # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        finance_message = "üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"

        trading = stats.get('trading', {})
        finance_message += "üìä *–¢–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
        finance_message += f"üõí –ü–æ–∫—É–ø–æ–∫: {trading.get('total_buys', 0)}\n"
        finance_message += f"üí∏ –ü—Ä–æ–¥–∞–∂: {trading.get('total_sells', 0)}\n"
        finance_message += f"üí∞ –ö—É–ø–ª–µ–Ω–æ –Ω–∞: {trading.get('total_bought', 0):,.0f} ‚ÇΩ\n"
        finance_message += f"üíé –ü—Ä–æ–¥–∞–Ω–æ –Ω–∞: {trading.get('total_sold', 0):,.0f} ‚ÇΩ\n"
        finance_message += f"‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {trading.get('realized_pnl', 0):+,.0f} ‚ÇΩ\n\n"

        portfolio = stats.get('portfolio', {})
        finance_message += "üíº *–¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:*\n"
        finance_message += f"üî¢ –ü–æ–∑–∏—Ü–∏–π: {portfolio.get('positions_count', 0)}\n"
        finance_message += f"üí∞ –í–ª–æ–∂–µ–Ω–æ: {portfolio.get('portfolio_cost', 0):,.0f} ‚ÇΩ\n"
        finance_message += f"üíé –°—Ç–æ–∏–º–æ—Å—Ç—å: {portfolio.get('portfolio_value', 0):,.0f} ‚ÇΩ\n"
        finance_message += f"üìà –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {portfolio.get('unrealized_pnl', 0):+,.0f} ‚ÇΩ ({portfolio.get('unrealized_return_pct', 0):+.1f}%)\n\n"

        total_pnl = stats.get('total_pnl', 0)
        pnl_emoji = "üìà" if total_pnl >= 0 else "üìâ"
        finance_message += f"{pnl_emoji} *–û–±—â–∏–π P&L: {total_pnl:+,.0f} ‚ÇΩ*"

        await message.answer(finance_message, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(F.data == "history")
async def show_history_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ callback"""
    await callback.answer("üìä –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é...")
    try:
        history = await get_order_history(callback.from_user.id)
        if not history:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            await callback.message.edit_text("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞", reply_markup=keyboard)
            return

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã
        header = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n<pre>"
        table = "–î–∞—Ç–∞  | –í—Ä–µ–º—è | –¢–∏–ø  | –¢–∏–∫–µ—Ä | –ö–æ–ª-–≤–æ |  –¶–µ–Ω–∞ \n"
        table += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        for order in history[-15:]:
            created_at = order.get('created_at')
            if created_at:
                if isinstance(created_at, str):
                    try:
                        from datetime import datetime
                        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        date_str = dt.strftime('%d.%m')
                        time_str = dt.strftime('%H:%M')
                    except:
                        date_str = created_at.split('T')[0][-5:]
                        time_str = created_at.split('T')[1][:5] if 'T' in created_at else '     '
                else:
                    date_str = created_at.strftime('%d.%m')
                    time_str = created_at.strftime('%H:%M')
            else:
                date_str = "  .  "
                time_str = "  :  "

            operation_type = order.get('operation_type', '').upper()
            if operation_type == 'BUY':
                op_type = "BUY"
            elif operation_type == 'SELL':
                op_type = "SELL"
            else:
                op_type = "   "

            ticker = order.get('ticker', '')[:5].ljust(5)
            quantity = f"{order.get('quantity', 0):>6}"
            price = f"{order.get('price', 0):>6.1f}"

            table += f"{date_str:<5} | {time_str:<5} | {op_type:<4} | {ticker:<5} | {quantity} | {price}\n"

        table += "</pre>\n\nüí° <i>–õ–µ–≥–µ–Ω–¥–∞:</i> BUY = –ü–æ–∫—É–ø–∫–∞, SELL = –ü—Ä–æ–¥–∞–∂–∞"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

        await callback.message.edit_text(header + table, parse_mode="HTML", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ callback: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π", reply_markup=keyboard)

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å (–∫–æ–º–∞–Ω–¥–∞)"""
    help_text = """
‚ùì <b>–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ Invest Bot</b>

ü§ñ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ /portfolio - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ P&L
‚Ä¢ /ideas - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –æ—Ç AI
‚Ä¢ /analyze –¢–ò–ö–ï–† - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /analyze SBER)
‚Ä¢ /target –¢–ò–ö–ï–† –¶–ï–ù–ê - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /target SBER 350)
‚Ä¢ /history - –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /finances - –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è, —Ä–∏—Å–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ

üìä <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>

<b>üß† AI-–ê–Ω–∞–ª–∏–∑ –∏ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—é–±—ã—Ö –∞–∫—Ü–∏–π MOEX —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ —Ä–∏—Å–∫–æ–≤ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

<b>üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ—Ä—Ç—Ñ–µ–ª–µ–º:</b>
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ MOEX
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–æ–≤ –∏ –æ–±—â–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>üîî –°–∏—Å—Ç–µ–º–∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
‚Ä¢ üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä—ã–Ω–∫–∞ (9:00 –ú–°–ö)
‚Ä¢ üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 20:00)
‚Ä¢ üéØ –ê–ª–µ—Ä—Ç—ã –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω (–ø–Ω-–ø—Ç 10:00-18:00)
‚Ä¢ ‚è∞ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è

<b>‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:</b>
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π/—É–º–µ—Ä–µ–Ω–Ω—ã–π/–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
‚Ä¢ –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
‚Ä¢ Sandbox-—Ä–µ–∂–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:</b>
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç –∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
3. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ "üí° –ò–¥–µ–∏"
4. –ò–∑—É—á–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –¥–≤–æ–π–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
‚Ä¢ Sandbox-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–∏—Å–∫–æ–≤
‚Ä¢ –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ API –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è

üìà <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã —Å MOEX –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ –Ω–∞ –±–∞–∑–µ xAI Grok –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
‚Ä¢ –£—á–µ—Ç –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Ä—ã–Ω–∫–∞
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @d_telitsyn
    """

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await message.answer(help_text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data == "help")
async def show_help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    help_text = """
‚ùì <b>–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ Invest Bot</b>

ü§ñ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ /portfolio - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ P&L
‚Ä¢ /ideas - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –æ—Ç AI
‚Ä¢ /analyze –¢–ò–ö–ï–† - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /analyze SBER)
‚Ä¢ /target –¢–ò–ö–ï–† –¶–ï–ù–ê - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /target SBER 350)
‚Ä¢ /history - –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /finances - –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è, —Ä–∏—Å–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üìä <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>

<b>üß† AI-–ê–Ω–∞–ª–∏–∑ –∏ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—é–±—ã—Ö –∞–∫—Ü–∏–π MOEX —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ —Ä–∏—Å–∫–æ–≤ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

<b>üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ—Ä—Ç—Ñ–µ–ª–µ–º:</b>
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ MOEX
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–æ–≤ –∏ –æ–±—â–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>üîî –°–∏—Å—Ç–µ–º–∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
‚Ä¢ üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä—ã–Ω–∫–∞ (9:00 –ú–°–ö)
‚Ä¢ üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 20:00)
‚Ä¢ üéØ –ê–ª–µ—Ä—Ç—ã –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω (–ø–Ω-–ø—Ç 10:00-18:00)
‚Ä¢ ‚è∞ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è

<b>‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:</b>
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π/—É–º–µ—Ä–µ–Ω–Ω—ã–π/–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
‚Ä¢ –ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
‚Ä¢ Sandbox-—Ä–µ–∂–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:</b>
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç –∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
3. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ "üí° –ò–¥–µ–∏"
4. –ò–∑—É—á–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –¥–≤–æ–π–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
‚Ä¢ Sandbox-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–∏—Å–∫–æ–≤
‚Ä¢ –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ API –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è

üìà <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã —Å MOEX –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ –Ω–∞ –±–∞–∑–µ xAI Grok –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
‚Ä¢ –£—á–µ—Ç –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Ä—ã–Ω–∫–∞
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @d_telitsyn
    """

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await callback.message.edit_text(help_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        settings = await get_user_settings(callback.from_user.id)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not settings:
            settings = {
                'risk_level': 'medium',
                'max_investment_amount': 10000,
                'notifications': True
            }

        risk_levels = {
            'low': 'üü¢ –ù–∏–∑–∫–∏–π',
            'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
            'high': 'üî¥ –í—ã—Å–æ–∫–∏–π'
        }

        settings_text = f"""
‚öôÔ∏è *–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*

üéØ *–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:* {risk_levels.get(settings.get('risk_level', 'medium'), settings.get('risk_level', 'medium'))}
üí∞ *–ú–∞–∫—Å. —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:* {settings.get('max_investment_amount', 10000):,.0f} ‚ÇΩ
üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.get('notifications', True) else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üéØ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", callback_data="set_risk"),
                InlineKeyboardButton(text="üí∞ –ú–∞–∫—Å. —Å—É–º–º–∞", callback_data="set_max_amount")
            ],
            [
                InlineKeyboardButton(text="üîî –û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications"),
                InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]
        ])

        await callback.message.edit_text(settings_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    await callback.answer()

@router.callback_query(F.data == "set_risk")
async def set_risk_level(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –ù–∏–∑–∫–∏–π", callback_data="risk_low"),
            InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="risk_medium")
        ],
        [
            InlineKeyboardButton(text="üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="risk_high"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings")
        ]
    ])

    await callback.message.answer(
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:*\n\n"
        "üü¢ *–ù–∏–∑–∫–∏–π* - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
        "üü° *–°—Ä–µ–¥–Ω–∏–π* - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å\n"
        "üî¥ *–í—ã—Å–æ–∫–∏–π* - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("risk_"))
async def update_risk_level(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    risk_level = callback.data.replace("risk_", "")

    await update_user_settings(callback.from_user.id, risk_level=risk_level)

    risk_names = {'low': '–ù–∏–∑–∫–∏–π', 'medium': '–°—Ä–µ–¥–Ω–∏–π', 'high': '–í—ã—Å–æ–∫–∏–π'}
    await callback.message.answer(
        f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{risk_names[risk_level]}*",
        parse_mode="Markdown"
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    await show_settings(callback)

@router.callback_query(F.data == "set_max_amount")
async def set_max_amount(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    await callback.message.answer(
        "üí∞ *–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –æ–¥–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–≤ —Ä—É–±–ª—è—Ö):*\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 50000",
        parse_mode="Markdown"
    )
    await state.set_state(InvestmentStates.waiting_for_max_amount)
    await callback.answer()

@router.message(InvestmentStates.waiting_for_max_amount)
async def process_max_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(message.text.replace(",", ".").replace(" ", ""))

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        if amount > 10000000:  # 10 –º–ª–Ω –ª–∏–º–∏—Ç
            await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ (–º–∞–∫—Å–∏–º—É–º 10,000,000 ‚ÇΩ)")
            return

        await update_user_settings(message.from_user.id, max_investment_amount=amount)

        await message.answer(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: *{amount:,.0f} ‚ÇΩ*", parse_mode="Markdown")
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000)")

@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        settings = await get_user_settings(callback.from_user.id)
        if not settings:
            settings = {'notifications': True}

        new_notifications = not settings.get('notifications', True)

        await update_user_settings(callback.from_user.id, notifications=new_notifications)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}: –æ–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è -> {new_notifications}")

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ –æ–∫–Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Ç—É–¥–∞
        if "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" in callback.message.text:
            await show_notification_settings(callback)
        else:
            # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            await show_settings(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ toggle_notifications: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

@router.message(Command("test_notifications"))
async def test_notifications(message: Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    settings = await get_user_settings(user_id)

    if not settings:
        settings = {
            'notifications': True,
            'max_investment_amount': 10000,
            'risk_level': 'medium'
        }

    if not settings.get('notifications', True):
        await message.answer("‚ùå –£ –≤–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –í–∫–ª—é—á–∏—Ç–µ –∏—Ö –≤ /settings")
        return

    # –°–∏–º—É–ª—è—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    await message.answer("üß™ *–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω...*", parse_mode="Markdown")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    xai_client = XAIClient()
    ideas = await xai_client.get_investment_ideas(
        budget=settings.get('max_investment_amount', 10000),
        risk_level=settings.get('risk_level', 'medium')
    )

    if ideas:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        test_message = "üåÖ *–¢–ï–°–¢: –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä—ã–Ω–∫–∞*\n\n"
        test_message += f"üìà *–°–≤–µ–∂–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –≤–∞—Å:*\n\n"

        for i, idea in enumerate(ideas[:3], 1):
            current_price = idea.get('current_price', 0)
            target_price = idea.get('target_price', 0)
            potential_return = ((target_price - current_price) / current_price * 100) if current_price > 0 else 0

            test_message += f"*{i}.* `{idea['ticker']}`\n"
            test_message += f"üí∞ –¶–µ–Ω–∞: {current_price:.2f} ‚ÇΩ ‚Üí üéØ {target_price:.2f} ‚ÇΩ\n"
            test_message += f"üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +{potential_return:.1f}%\n"
            test_message += f"üìù {idea['reasoning'][:100]}...\n\n"

        test_message += "_–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ù–∞—Å—Ç–æ—è—â–∏–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ 9:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ._"

        await message.answer(test_message, parse_mode="Markdown")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞")

@router.message(Command("force_daily"))
async def force_daily_analysis(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        await message.answer("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        from scheduler import scheduler_service

        # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        await scheduler_service.daily_market_analysis()

        await message.answer("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("force_weekly"))
async def force_weekly_report(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        await message.answer("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")

        from scheduler import scheduler_service
        await scheduler_service.weekly_portfolio_report()

        await message.answer("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("force_targets"))
async def force_target_check(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        await message.answer("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω...")

        from scheduler import scheduler_service
        await scheduler_service.check_target_prices()

        await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("force_prices"))
async def force_price_update(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        await message.answer("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω...")

        from scheduler import scheduler_service
        await scheduler_service.update_market_prices()

        await message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("debug_test"))
async def debug_test_simple(message: Message):
    """–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = await get_user_settings(user_id)

        text = f"üîç –û—Ç–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        import datetime
        from pytz import UTC
        now = datetime.datetime.now(UTC)
        is_workday = now.weekday() < 5  # 0-4 —ç—Ç–æ –ø–Ω-–ø—Ç
        is_workhour = 10 <= now.hour <= 18
        is_worktime = is_workday and is_workhour

        text += f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S UTC')}\n"
        text += f"üìÖ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å: {'‚úÖ' if is_workday else '‚ùå'} ({now.strftime('%A')})\n"
        text += f"‚è∞ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {'‚úÖ' if is_workhour else '‚ùå'} (10-18 UTC)\n"
        text += f"üíº –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {'‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç' if is_worktime else '‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}\n\n"

        if settings:
            text += "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:\n"
            text += f"‚Ä¢ notifications: {settings.get('notifications', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}\n"
            text += f"‚Ä¢ daily_market_analysis: {settings.get('daily_market_analysis', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}\n"
            text += f"‚Ä¢ weekly_portfolio_report: {settings.get('weekly_portfolio_report', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}\n"
            text += f"‚Ä¢ target_price_alerts: {settings.get('target_price_alerts', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}\n"
            text += f"‚Ä¢ price_updates: {settings.get('price_updates', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}\n\n"
        else:
            text += "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î\n\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        from scheduler import scheduler_service
        if scheduler_service.is_running:
            text += "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: ‚úÖ –ó–∞–ø—É—â–µ–Ω\n"
            jobs = scheduler_service.list_jobs()
            text += f"‚è∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(jobs)}\n"
        else:
            text += "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: ‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"

        text += "\nüîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        text += "‚Ä¢ /force_daily - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞\n"
        text += "‚Ä¢ /force_weekly - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\n"
        text += "‚Ä¢ /force_targets - –¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã\n"
        text += "‚Ä¢ /force_prices - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω\n\n"
        text += "‚ÑπÔ∏è *–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:*\n"
        text += "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –∏ —Ü–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–ø–Ω-–ø—Ç 10-18 UTC)"

        await message.answer(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–ª–∞–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}...")

@router.message(Command("debug_notifications"))
async def debug_notifications(message: Message):
    """–û—Ç–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = await get_user_settings(user_id)

        debug_info = f"üîç *–û—Ç–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}*\n\n"

        if settings:
            debug_info += "‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:*\n"
            debug_info += f"‚Ä¢ notifications: {settings.get('notifications', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}\n"
            debug_info += f"‚Ä¢ daily_market_analysis: {settings.get('daily_market_analysis', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}\n"
            debug_info += f"‚Ä¢ weekly_portfolio_report: {settings.get('weekly_portfolio_report', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}\n"
            debug_info += f"‚Ä¢ target_price_alerts: {settings.get('target_price_alerts', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}\n"
            debug_info += f"‚Ä¢ price_updates: {settings.get('price_updates', '–Ω–µ –∑–∞–¥–∞–Ω–æ')}\n\n"
        else:
            debug_info += "‚ùå *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î*\n\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–∞—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        from database import get_users_with_notification_type
        notification_types = [
            ('daily_market_analysis', 'üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞'),
            ('weekly_portfolio_report', 'üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç'),
            ('target_price_alerts', 'üéØ –¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã'),
            ('price_updates', '‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω')
        ]

        for notification_type, description in notification_types:
            try:
                users = await get_users_with_notification_type(notification_type)
                user_in_list = any(u['user_id'] == user_id for u in users)
                debug_info += f"{description}: {'‚úÖ –î–∞' if user_in_list else '‚ùå –ù–µ—Ç'} ({len(users)} –≤—Å–µ–≥–æ)\\n"
            except Exception as e:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                error_msg = str(e).replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')
                debug_info += f"{description}: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {error_msg}\\n"

        debug_info += "\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        from scheduler import scheduler_service
        if scheduler_service.is_running:
            debug_info += "‚è∞ *–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:* ‚úÖ –ó–∞–ø—É—â–µ–Ω\n"
            jobs = scheduler_service.list_jobs()
            debug_info += f"‚è∞ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:* {len(jobs)}\n"
            for job in jobs:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                next_run = str(job['next_run']) if job['next_run'] else '–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                job_name = str(job['name']).replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')
                next_run = next_run.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')
                debug_info += f"  ‚Ä¢ {job_name} (—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run})\n"
        else:
            debug_info += "‚è∞ *–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:* ‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"

        debug_info += "\\nüîß *–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*\\n"
        debug_info += "‚Ä¢ `/force_daily` - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞\\n"
        debug_info += "‚Ä¢ `/force_weekly` - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\\n"
        debug_info += "‚Ä¢ `/force_targets` - –¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã\\n"
        debug_info += "‚Ä¢ `/force_prices` - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω"

        try:
            await message.answer(debug_info, parse_mode="Markdown")
        except Exception as markdown_error:
            # –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.warning(f"–û—à–∏–±–∫–∞ Markdown –≤ debug_notifications: {markdown_error}")
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ markdown —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            plain_text = debug_info.replace('*', '').replace('_', '').replace('`', '').replace('\\n', '\n').replace('\\[', '[').replace('\\]', ']')
            await message.answer(plain_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data == "analyze_menu")
async def show_analyze_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ü–∏–π"""
    analyze_text = """
üìà *–ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π*

–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª—é–±–æ–π –∞–∫—Ü–∏–∏ —Å MOEX –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/analyze –¢–ò–ö–ï–†`

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ `/analyze SBER` - –∞–Ω–∞–ª–∏–∑ –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ `/analyze YNDX` - –∞–Ω–∞–ª–∏–∑ –Ø–Ω–¥–µ–∫—Å–∞
‚Ä¢ `/analyze GAZP` - –∞–Ω–∞–ª–∏–∑ –ì–∞–∑–ø—Ä–æ–º–∞
‚Ä¢ `/analyze OZON` - –∞–Ω–∞–ª–∏–∑ –û–∑–æ–Ω–∞
‚Ä¢ `/analyze LKOH` - –∞–Ω–∞–ª–∏–∑ –õ–£–ö–û–ô–õ–∞

*–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑:*
‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏
‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (–ø–æ–∫—É–ø–∞—Ç—å/–¥–µ—Ä–∂–∞—Ç—å/–ø—Ä–æ–¥–∞–≤–∞—Ç—å)
‚úÖ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞
‚úÖ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
‚úÖ –ü–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã –∫–æ–º–ø–∞–Ω–∏–∏
‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç AI

üí° –ú–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ —Ç–∏–∫–µ—Ä—ã, —Ç–æ—Ä–≥—É—é—â–∏–µ—Å—è –Ω–∞ MOEX
    """

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí° –ò–¥–µ–∏ –æ—Ç AI", callback_data="get_ideas"),
            InlineKeyboardButton(text="üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")
        ],
        [
            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ]
    ])

    await callback.message.edit_text(analyze_text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio"),
            InlineKeyboardButton(text="üí° –ò–¥–µ–∏", callback_data="get_ideas")
        ],
        [
            InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π", callback_data="analyze_menu"),
            InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")
        ],
        [
            InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="finances"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ])

    welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Invest Bot!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üí° –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –æ—Ç AI
‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∞–∫—Ü–∏–∏ MOEX –ø–æ —Ç–∏–∫–µ—Ä—É
‚Ä¢ üíº –£–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä—ã–Ω–∫–µ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """

    await callback.message.edit_text(welcome_text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()
