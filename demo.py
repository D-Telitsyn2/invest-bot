#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import asyncio
import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import init_db, create_user, save_order, get_user_portfolio
from tinkoff_client import get_price, place_order

async def demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Invest Bot\n")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞\n")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = 123456789
    print(f"üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {test_user_id})...")
    await create_user(test_user_id, "test_user", "Test User")
    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω\n")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π (–±–µ–∑ API –∫–ª—é—á–∞ OpenAI)
    print("üí° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–¥–µ–π...")
    print("‚ö†Ô∏è  –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ API –∫–ª—é—á–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏:")

    # –ó–∞–≥–ª—É—à–∫–∞ –∏–¥–µ–π
    mock_ideas = [
        {"ticker": "SBER", "action": "BUY", "price": 280.50},
        {"ticker": "GAZP", "action": "BUY", "price": 175.20},
        {"ticker": "YNDX", "action": "BUY", "price": 2650.00}
    ]

    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(mock_ideas)} –∏–¥–µ–π:")
    for i, idea in enumerate(mock_ideas, 1):
        print(f"  {i}. {idea['ticker']} - {idea['action']} –ø–æ {idea['price']:.2f} ‚ÇΩ")
    print()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ü–∏–π
    print("üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –∞–∫—Ü–∏–π...")
    tickers = ["SBER", "GAZP", "YNDX"]
    for ticker in tickers:
        try:
            price = await get_price(ticker)
            if price:
                print(f"  {ticker}: {price:.2f} ‚ÇΩ")
            else:
                print(f"  {ticker}: —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            print(f"  {ticker}: –æ—à–∏–±–∫–∞ - {e}")
    print()

    # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –∞–∫—Ü–∏–π
    print("üí∞ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –∞–∫—Ü–∏–π...")
    try:
        result = await place_order(
            ticker="SBER",
            quantity=10,
            price=280.50,
            direction="buy"
        )

        if result['success']:
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result['order_id']}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await save_order(
                user_id=test_user_id,
                ticker="SBER",
                quantity=10,
                price=280.50,
                order_type="BUY",
                total_amount=2805.0,
                order_id=result['order_id']
            )
            print("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—è–≤–∫–∏: {result['error']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
    print()

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
    print("üíº –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
    try:
        portfolio = await get_user_portfolio(test_user_id)
        if portfolio:
            print("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ:")
            for position in portfolio:
                print(f"  {position['ticker']}: {position['quantity']} —à—Ç. "
                      f"–ø–æ {position['avg_price']:.2f} ‚ÇΩ "
                      f"(—Å—Ç–æ–∏–º–æ—Å—Ç—å: {position['current_value']:.2f} ‚ÇΩ)")
        else:
            print("üì≠ –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
    print()

    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py")

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
    required_vars = ['TELEGRAM_BOT_TOKEN', 'OPENAI_API_KEY', 'TINKOFF_TOKEN']
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        print("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
        for var in missing_vars:
            print(f"  - {var}")
        print("\n–ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏...\n")
    else:
        print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n")    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    asyncio.run(demo())
